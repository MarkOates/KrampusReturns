<!DOCTYPE html>
<head>
<style>
*
{
  font-family: 'Arial';
  padding: 3px 20px;
}
table td
{
  padding: 3px 20px;
}
.property
{
  color: blue;
}
.private_property
{
  color: lightblue;
}

.method
{
  color: red;
}

.private_method
{
  color: pink;
}

.dependency
{
  color: green;
}

.component
{
  padding: 20 10 20 10;
  margin: 20 10 20 10;
  background-color: #dfdfdf;
}

.component h3
{
}
</style>
</head>
<body>
<h1>TOC</h1>
<ul>
  <li><a href="#quintessence/KrampusReturns/Entities/Krampus.q.yml">quintessence/KrampusReturns/Entities/Krampus.q.yml</a></li>
  <li><a href="#quintessence/KrampusReturns/EntityFactory.q.yml">quintessence/KrampusReturns/EntityFactory.q.yml</a></li>
  <li><a href="#quintessence/KrampusReturns/Gameplay/Screen.q.yml">quintessence/KrampusReturns/Gameplay/Screen.q.yml</a></li>
  <li><a href="#quintessence/KrampusReturns/Runner.q.yml">quintessence/KrampusReturns/Runner.q.yml</a></li>
</ul>
<h1>Components</h1>
<ul>
  <div class="component">
    <h3 id="quintessence/KrampusReturns/Entities/Krampus.q.yml">quintessence/KrampusReturns/Entities/Krampus.q.yml</h3>
     <table>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::FrameAnimated2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/FrameAnimated2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/KrampusReturns/EntityFactory.q.yml">quintessence/KrampusReturns/EntityFactory.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">create_krampus(3)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2DFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::EntityFlagNames&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/EntityFlagNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;KrampusReturns::Entities::Krampus&quot;, &quot;headers&quot;=&gt;[&quot;KrampusReturns/Entities/Krampus.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/KrampusReturns/Gameplay/Screen.q.yml">quintessence/KrampusReturns/Gameplay/Screen.q.yml</h3>
     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">display</td>
  <td class="property">AllegroFlare::Display*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">native_display_resolution_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">native_display_resolution_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">currently_active_map</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::TileMaps::Basic2D*</td>
</tr>
<tr>
  <td class="property">currently_active_map_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">entity_pool</td>
  <td class="property">std::vector&lt;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*&gt;</td>
</tr>
<tr>
  <td class="property">map_dictionary</td>
  <td class="property">std::map&lt;std::string, std::string&gt;</td>
</tr>
<tr>
  <td class="property">gravity</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">gravity_reversed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">camera</td>
  <td class="property">AllegroFlare::Camera2D</td>
</tr>
<tr>
  <td class="property">camera_baseline_zoom</td>
  <td class="property">AllegroFlare::Vec2D</td>
</tr>
<tr>
  <td class="property">player_controlled_entity</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">show_tile_mesh</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">show_collision_tile_mesh</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">player_controls</td>
  <td class="property">AllegroFlare::VirtualControls</td>
</tr>
<tr>
  <td class="property">camera_control_strategy</td>
  <td class="property">AllegroFlare::CameraControlStrategies2D::Base*</td>
</tr>
<tr>
  <td class="property">backbuffer_sub_bitmap</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">set_map_dictionary(1)</td>
</tr>
<tr>
  <td class="method">set_display(1)</td>
</tr>
<tr>
  <td class="method">set_event_emitter(1)</td>
</tr>
<tr>
  <td class="method">set_bitmap_bin(1)</td>
</tr>
<tr>
  <td class="method">set_currently_active_map(1)</td>
</tr>
<tr>
  <td class="method">find_map_by_name(1)</td>
</tr>
<tr>
  <td class="method">on_activate()</td>
</tr>
<tr>
  <td class="method">on_deactivate()</td>
</tr>
<tr>
  <td class="method">initialize_maps()</td>
</tr>
<tr>
  <td class="method">add_entity_to_pool(1)</td>
</tr>
<tr>
  <td class="method">initialize_camera_control()</td>
</tr>
<tr>
  <td class="method">initialize_player_controls()</td>
</tr>
<tr>
  <td class="method">initialize_backbuffer_sub_bitmap()</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="private_method">initialize_camera()</td>
</tr>
<tr>
  <td class="method">unset_player_controlled_entity_vertical_velocity()</td>
</tr>
<tr>
  <td class="method">unset_player_controlled_entity_horizontal_velocity()</td>
</tr>
<tr>
  <td class="method">set_player_controlled_entity_jump()</td>
</tr>
<tr>
  <td class="method">player_emit_projectile(1)</td>
</tr>
<tr>
  <td class="method">reverse_gravity()</td>
</tr>
<tr>
  <td class="method">update_entities()</td>
</tr>
<tr>
  <td class="private_method">cleanup_entities_flagged_for_deletion()</td>
</tr>
<tr>
  <td class="private_method">check_player_collisions_with_doors()</td>
</tr>
<tr>
  <td class="private_method">update_player_collisions_with_collectables()</td>
</tr>
<tr>
  <td class="private_method">update_player_collisions_with_goalposts()</td>
</tr>
<tr>
  <td class="method">draw_entities()</td>
</tr>
<tr>
  <td class="method">update_player_controls_on_player_controlled_entity()</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">draw()</td>
</tr>
<tr>
  <td class="method">toggle_show_collision_tile_mesh()</td>
</tr>
<tr>
  <td class="method">toggle_show_tile_mesh()</td>
</tr>
<tr>
  <td class="method">primary_timer_func()</td>
</tr>
<tr>
  <td class="method">key_char_func(1)</td>
</tr>
<tr>
  <td class="method">key_up_func(1)</td>
</tr>
<tr>
  <td class="method">key_down_func(1)</td>
</tr>
<tr>
  <td class="method">virtual_control_button_down_func(1)</td>
</tr>
<tr>
  <td class="method">virtual_control_button_up_func(1)</td>
</tr>
<tr>
  <td class="method">virtual_control_axis_change_func(1)</td>
</tr>
<tr>
  <td class="method">user_event_func(1)</td>
</tr>
<tr>
  <td class="method">render_collision_tile_mesh()</td>
</tr>
<tr>
  <td class="method">get_tile_atlas()</td>
</tr>
<tr>
  <td class="method">get_tile_mesh()</td>
</tr>
<tr>
  <td class="method">get_collision_tile_mesh()</td>
</tr>
<tr>
  <td class="method">get_current_map_entities()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;int, int&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControls&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControls.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControlsProcessor&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControlsProcessor.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMeshAtlas&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMeshAtlas.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventNames&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2DFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Frameworks::Full&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Frameworks/Full.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec2d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Physics::TileMapCollisionStepper&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Physics/TileMapCollisionStepper.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Physics::AABB2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Physics/AABB2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::EntityFlagNames&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/EntityFlagNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::CameraControlStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/CameraControlStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::CameraControlStrategies2D::Snap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/CameraControlStrategies2D/Snap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::CameraControlStrategies2D::SmoothSnap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/CameraControlStrategies2D/SmoothSnap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::CameraControlStrategies2D::SmoothSnapWithZoomEffect&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/CameraControlStrategies2D/SmoothSnapWithZoomEffect.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::CameraControlStrategies2D::HorizontalRail&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/CameraControlStrategies2D/HorizontalRail.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::EntityCollectionHelper&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/EntityCollectionHelper.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::TileMaps::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/TileMaps/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Doors::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Doors/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::find&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;tan&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMesh&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMesh.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Display&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Display.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Camera2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Camera2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/KrampusReturns/Runner.q.yml">quintessence/KrampusReturns/Runner.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">run()</td>
</tr>
    </table>
     <table>
    </table>
  </div>
</ul>
<h1>Dependents</h1>
<pre>
{
  "AllegroFlare/Prototypes/Platforming2D/Entities/FrameAnimated2D": [
    "KrampusReturns/Entities/Krampus"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory": [
    "KrampusReturns/EntityFactory",
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/Prototypes/Platforming2D/EntityFlagNames": [
    "KrampusReturns/EntityFactory",
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D": [
    "KrampusReturns/EntityFactory",
    "KrampusReturns/Gameplay/Screen"
  ],
  "KrampusReturns/Entities/Krampus": [
    "KrampusReturns/EntityFactory"
  ],
  "AllegroFlare/BitmapBin": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "al_color_name": [
    "KrampusReturns/Gameplay/Screen",
    "KrampusReturns/Gameplay/Screen"
  ],
  "std/map<int, int>": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/VirtualControls": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/VirtualControlsProcessor": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/TileMaps/PrimMeshAtlas": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/EventNames": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/Screen": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/Frameworks/Full": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/Placement2D": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/vec2d": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/Physics/TileMapCollisionStepper": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/Physics/AABB2D": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/CameraControlStrategies2D/Base": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/CameraControlStrategies2D/Snap": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/CameraControlStrategies2D/SmoothSnap": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/CameraControlStrategies2D/SmoothSnapWithZoomEffect": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/CameraControlStrategies2D/HorizontalRail": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/Prototypes/Platforming2D/EntityCollectionHelper": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/TileMaps/Basic2D": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/Doors/Basic2D": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "std/find": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "tan": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/TileMaps/PrimMesh": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/TileMaps/TileMap": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "ALLEGRO_EVENT": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/Display": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/EventEmitter": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/Screens/Base": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/Camera2D": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "ALLEGRO_BITMAP": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/Vec2D": [
    "KrampusReturns/Gameplay/Screen"
  ]
}
</pre>
</body>