<!DOCTYPE html>
<head>
<style>
*
{
  font-family: 'Arial';
  padding: 3px 20px;
}
table td
{
  padding: 3px 20px;
}
.property
{
  color: blue;
}
.private_property
{
  color: lightblue;
}

.method
{
  color: red;
}

.private_method
{
  color: pink;
}

.dependency
{
  color: green;
}

.component
{
  padding: 20 10 20 10;
  margin: 20 10 20 10;
  background-color: #dfdfdf;
}

.component h3
{
}
</style>
</head>
<body>
<h1>TOC</h1>
<ul>
  <li><a href="#quintessence/KrampusReturns/CameraControlStrategies2D/SmoothSnapWithFX.q.yml">quintessence/KrampusReturns/CameraControlStrategies2D/SmoothSnapWithFX.q.yml</a></li>
  <li><a href="#quintessence/KrampusReturns/Entities/Blob.q.yml">quintessence/KrampusReturns/Entities/Blob.q.yml</a></li>
  <li><a href="#quintessence/KrampusReturns/Entities/Krampus.q.yml">quintessence/KrampusReturns/Entities/Krampus.q.yml</a></li>
  <li><a href="#quintessence/KrampusReturns/EntityFactory.q.yml">quintessence/KrampusReturns/EntityFactory.q.yml</a></li>
  <li><a href="#quintessence/KrampusReturns/Gameplay/Screen.q.yml">quintessence/KrampusReturns/Gameplay/Screen.q.yml</a></li>
  <li><a href="#quintessence/KrampusReturns/KrampusController.q.yml">quintessence/KrampusReturns/KrampusController.q.yml</a></li>
  <li><a href="#quintessence/KrampusReturns/Runner.q.yml">quintessence/KrampusReturns/Runner.q.yml</a></li>
  <li><a href="#quintessence/KrampusReturns/Shaders/AllegroDefault.q.yml">quintessence/KrampusReturns/Shaders/AllegroDefault.q.yml</a></li>
  <li><a href="#quintessence/KrampusReturns/Shaders/Primary.q.yml">quintessence/KrampusReturns/Shaders/Primary.q.yml</a></li>
  <li><a href="#quintessence/KrampusReturns/Testing/Gym.q.yml">quintessence/KrampusReturns/Testing/Gym.q.yml</a></li>
</ul>
<h1>Components</h1>
<ul>
  <div class="component">
    <h3 id="quintessence/KrampusReturns/CameraControlStrategies2D/SmoothSnapWithFX.q.yml">quintessence/KrampusReturns/CameraControlStrategies2D/SmoothSnapWithFX.q.yml</h3>
     <table>
<tr>
  <td class="property">room_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">room_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">entity_to_follow</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">tracking_target_position_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">tracking_target_position_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">impact_shake_started_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">impact_shake_intensity</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">impact_shake_duration</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">random</td>
  <td class="property">AllegroFlare::Random</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">start_impact_shake(3)</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">calc_impact_shake_age(1)</td>
</tr>
<tr>
  <td class="method">normalized_impact_shake_age(2)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::CameraControlStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/CameraControlStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;fabs&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Useful&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Random&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Random.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/KrampusReturns/Entities/Blob.q.yml">quintessence/KrampusReturns/Entities/Blob.q.yml</h3>
     <table>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">preferred_direction</td>
  <td class="property">AllegroFlare::Vec2D</td>
</tr>
<tr>
  <td class="property">preferred_direction_started_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">preferred_direction_next_update_duration</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">health</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">max_health</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">take_damage(1)</td>
</tr>
<tr>
  <td class="method">set_preferred_direction()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::FrameAnimated2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/FrameAnimated2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;sin&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::rand&quot;, &quot;headers&quot;=&gt;[&quot;cstdlib&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/KrampusReturns/Entities/Krampus.q.yml">quintessence/KrampusReturns/Entities/Krampus.q.yml</h3>
     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">state</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">state_changed_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">state_is_busy</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">attack_hit_activated</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">health</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">max_health</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">stunned_from_damage_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">invincible_from_taking_damage_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">invincible_from_taking_damage</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">STATE_UNDEF</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">STATE_STANDING</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">STATE_ATTACKING</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">STATE_WALKING</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">STATE_STUNNED_FROM_TAKING_DAMAGE</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">STATE_DYING</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="private_method">set_state(2)</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">emit_bump_camera_shake_event()</td>
</tr>
<tr>
  <td class="method">emit_smash_club_sound_effect()</td>
</tr>
<tr>
  <td class="method">emit_take_damage_sound_effect()</td>
</tr>
<tr>
  <td class="method">emit_player_died_event()</td>
</tr>
<tr>
  <td class="method">stand_still()</td>
</tr>
<tr>
  <td class="method">stand_still_x()</td>
</tr>
<tr>
  <td class="method">stand_still_y()</td>
</tr>
<tr>
  <td class="method">walk_right()</td>
</tr>
<tr>
  <td class="method">walk_up()</td>
</tr>
<tr>
  <td class="method">walk_down()</td>
</tr>
<tr>
  <td class="method">walk_left()</td>
</tr>
<tr>
  <td class="method">face_left()</td>
</tr>
<tr>
  <td class="method">face_right()</td>
</tr>
<tr>
  <td class="method">attack()</td>
</tr>
<tr>
  <td class="method">take_hit(1)</td>
</tr>
<tr>
  <td class="method">infer_state_age(1)</td>
</tr>
<tr>
  <td class="method">infer_age_of(2)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::FrameAnimated2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/FrameAnimated2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Errors&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Errors.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;sin&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/KrampusReturns/EntityFactory.q.yml">quintessence/KrampusReturns/EntityFactory.q.yml</h3>
     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">init_entities_drawing_debug</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">create_krampus(3)</td>
</tr>
<tr>
  <td class="method">create_blob()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2DFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::EntityFlagNames&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/EntityFlagNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;KrampusReturns::Entities::Krampus&quot;, &quot;headers&quot;=&gt;[&quot;KrampusReturns/Entities/Krampus.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;KrampusReturns::Entities::Blob&quot;, &quot;headers&quot;=&gt;[&quot;KrampusReturns/Entities/Blob.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/KrampusReturns/Gameplay/Screen.q.yml">quintessence/KrampusReturns/Gameplay/Screen.q.yml</h3>
     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">display</td>
  <td class="property">AllegroFlare::Display*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">native_display_resolution_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">native_display_resolution_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">currently_active_map</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::TileMaps::Basic2D*</td>
</tr>
<tr>
  <td class="property">currently_active_map_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">entity_pool</td>
  <td class="property">std::vector&lt;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*&gt;</td>
</tr>
<tr>
  <td class="property">map_dictionary</td>
  <td class="property">std::map&lt;std::string, std::string&gt;</td>
</tr>
<tr>
  <td class="property">gravity</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">gravity_reversed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">camera</td>
  <td class="property">AllegroFlare::Camera2D</td>
</tr>
<tr>
  <td class="property">camera_baseline_zoom</td>
  <td class="property">AllegroFlare::Vec2D</td>
</tr>
<tr>
  <td class="property">krampus_controller</td>
  <td class="property">KrampusReturns::KrampusController</td>
</tr>
<tr>
  <td class="property">player_controlled_entity</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">shader</td>
  <td class="property">AllegroFlare::Shader*</td>
</tr>
<tr>
  <td class="property">show_tile_mesh</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">show_collision_tile_mesh</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">camera_control_strategy</td>
  <td class="property">AllegroFlare::CameraControlStrategies2D::Base*</td>
</tr>
<tr>
  <td class="property">backbuffer_sub_bitmap</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">showing_full_color_overlay</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">full_color_overlay_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">full_color_overlay_opacity</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">showing_banner_text</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">banner_text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">banner_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">state</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">state_changed_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">state_is_busy</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">STATE_UNDEF</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">STATE_PLAYING_IN_LEVEL</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">STATE_PLAYER_DIED</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">STATE_FINISHED_LEVEL</td>
  <td class="property">uint32_t</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">set_state(2)</td>
</tr>
<tr>
  <td class="method">get_sparkle_win_color()</td>
</tr>
<tr>
  <td class="method">update_state(1)</td>
</tr>
<tr>
  <td class="method">play_win_music()</td>
</tr>
<tr>
  <td class="method">set_map_dictionary(1)</td>
</tr>
<tr>
  <td class="method">set_display(1)</td>
</tr>
<tr>
  <td class="method">set_event_emitter(1)</td>
</tr>
<tr>
  <td class="method">set_bitmap_bin(1)</td>
</tr>
<tr>
  <td class="method">set_font_bin(1)</td>
</tr>
<tr>
  <td class="method">set_currently_active_map(1)</td>
</tr>
<tr>
  <td class="method">set_player_controlled_entity(1)</td>
</tr>
<tr>
  <td class="method">find_map_by_name(1)</td>
</tr>
<tr>
  <td class="method">on_activate()</td>
</tr>
<tr>
  <td class="method">on_deactivate()</td>
</tr>
<tr>
  <td class="method">initialize_maps()</td>
</tr>
<tr>
  <td class="method">add_entity_to_pool(1)</td>
</tr>
<tr>
  <td class="method">initialize_camera_control()</td>
</tr>
<tr>
  <td class="method">initialize_backbuffer_sub_bitmap()</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="private_method">initialize_shader()</td>
</tr>
<tr>
  <td class="private_method">initialize_camera()</td>
</tr>
<tr>
  <td class="method">start_level()</td>
</tr>
<tr>
  <td class="method">reverse_gravity()</td>
</tr>
<tr>
  <td class="method">select_enemies(1)</td>
</tr>
<tr>
  <td class="method">update_enemy_collisions_with_damage_zones()</td>
</tr>
<tr>
  <td class="method">update_player_collisions_with_damage_zones()</td>
</tr>
<tr>
  <td class="method">update_entities()</td>
</tr>
<tr>
  <td class="private_method">cleanup_entities_flagged_for_deletion()</td>
</tr>
<tr>
  <td class="private_method">check_player_collisions_with_doors()</td>
</tr>
<tr>
  <td class="private_method">update_player_collisions_with_collectables()</td>
</tr>
<tr>
  <td class="private_method">update_player_collisions_with_goalposts()</td>
</tr>
<tr>
  <td class="method">draw_entities()</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">draw()</td>
</tr>
<tr>
  <td class="method">set_full_color_overlay(2)</td>
</tr>
<tr>
  <td class="method">show_full_color_overlay()</td>
</tr>
<tr>
  <td class="method">hide_full_color_overlay()</td>
</tr>
<tr>
  <td class="method">set_banner_text(2)</td>
</tr>
<tr>
  <td class="method">show_banner_text()</td>
</tr>
<tr>
  <td class="method">hide_banner_text()</td>
</tr>
<tr>
  <td class="method">draw_hud()</td>
</tr>
<tr>
  <td class="method">toggle_show_collision_tile_mesh()</td>
</tr>
<tr>
  <td class="method">toggle_show_tile_mesh()</td>
</tr>
<tr>
  <td class="method">primary_timer_func()</td>
</tr>
<tr>
  <td class="method">shake_camera(3)</td>
</tr>
<tr>
  <td class="method">game_event_func(1)</td>
</tr>
<tr>
  <td class="method">key_char_func(1)</td>
</tr>
<tr>
  <td class="method">key_up_func(1)</td>
</tr>
<tr>
  <td class="method">key_down_func(1)</td>
</tr>
<tr>
  <td class="method">user_event_func(1)</td>
</tr>
<tr>
  <td class="method">render_collision_tile_mesh()</td>
</tr>
<tr>
  <td class="method">get_tile_atlas()</td>
</tr>
<tr>
  <td class="method">get_tile_mesh()</td>
</tr>
<tr>
  <td class="method">get_collision_tile_mesh()</td>
</tr>
<tr>
  <td class="method">get_current_map_entities()</td>
</tr>
<tr>
  <td class="method">get_current_map_entities_y_sorted()</td>
</tr>
<tr>
  <td class="method">obtain_banner_font()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;int, int&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControls&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControls.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControlsProcessor&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControlsProcessor.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMeshAtlas&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMeshAtlas.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventNames&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2DFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Frameworks::Full&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Frameworks/Full.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec2d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Physics::TileMapCollisionStepper&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Physics/TileMapCollisionStepper.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Physics::AABB2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Physics/AABB2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::EntityFlagNames&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/EntityFlagNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::CameraControlStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/CameraControlStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::CameraControlStrategies2D::Snap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/CameraControlStrategies2D/Snap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::CameraControlStrategies2D::SmoothSnap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/CameraControlStrategies2D/SmoothSnap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::CameraControlStrategies2D::SmoothSnapWithZoomEffect&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/CameraControlStrategies2D/SmoothSnapWithZoomEffect.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::CameraControlStrategies2D::HorizontalRail&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/CameraControlStrategies2D/HorizontalRail.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::EntityCollectionHelper&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/EntityCollectionHelper.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::TileMaps::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/TileMaps/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Doors::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Doors/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::find&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;tan&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMesh&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMesh.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Display&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Display.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEvent&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEvent.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Camera2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Camera2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;KrampusReturns::Shaders::Primary&quot;, &quot;headers&quot;=&gt;[&quot;KrampusReturns/Shaders/Primary.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;KrampusReturns::Shaders::AllegroDefault&quot;, &quot;headers&quot;=&gt;[&quot;KrampusReturns/Shaders/AllegroDefault.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shader&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shader.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;KrampusReturns::KrampusController&quot;, &quot;headers&quot;=&gt;[&quot;KrampusReturns/KrampusController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;KrampusReturns::Entities::Krampus&quot;, &quot;headers&quot;=&gt;[&quot;KrampusReturns/Entities/Krampus.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;KrampusReturns::Entities::Blob&quot;, &quot;headers&quot;=&gt;[&quot;KrampusReturns/Entities/Blob.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;KrampusReturns::CameraControlStrategies2D::SmoothSnapWithFX&quot;, &quot;headers&quot;=&gt;[&quot;KrampusReturns/CameraControlStrategies2D/SmoothSnapWithFX.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::HealthBars::Hearts&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/HealthBars/Hearts.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Errors&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Errors.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/KrampusReturns/KrampusController.q.yml">quintessence/KrampusReturns/KrampusController.q.yml</h3>
     <table>
<tr>
  <td class="property">player_controls</td>
  <td class="property">AllegroFlare::VirtualControls</td>
</tr>
<tr>
  <td class="property">krampus</td>
  <td class="property">KrampusReturns::Entities::Krampus*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">reset()</td>
</tr>
<tr>
  <td class="method">key_up_func(2)</td>
</tr>
<tr>
  <td class="method">key_down_func(2)</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="private_method">jump()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;KrampusReturns::Entities::Krampus&quot;, &quot;headers&quot;=&gt;[&quot;KrampusReturns/Entities/Krampus.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControls&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControls.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::EntityFlagNames&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/EntityFlagNames.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/KrampusReturns/Runner.q.yml">quintessence/KrampusReturns/Runner.q.yml</h3>
     <table>
<tr>
  <td class="property">mode</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">framework</td>
  <td class="property">AllegroFlare::Frameworks::Full*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">opening_logos_storyboard_screen</td>
  <td class="property">AllegroFlare::Screens::Storyboard*</td>
</tr>
<tr>
  <td class="property">title_screen</td>
  <td class="property">AllegroFlare::Screens::TitleScreen</td>
</tr>
<tr>
  <td class="property">pause_screen</td>
  <td class="property">AllegroFlare::Screens::PauseScreen</td>
</tr>
<tr>
  <td class="property">new_game_intro_storyboard_screen</td>
  <td class="property">AllegroFlare::Screens::Storyboard*</td>
</tr>
<tr>
  <td class="property">platforming_2d_screen</td>
  <td class="property">KrampusReturns::Gameplay::Screen</td>
</tr>
<tr>
  <td class="property">achievements_screen</td>
  <td class="property">AllegroFlare::Screens::Achievements</td>
</tr>
<tr>
  <td class="property">credits_screen</td>
  <td class="property">AllegroFlare::Screens::Storyboard*</td>
</tr>
<tr>
  <td class="property">blurry_background_screen_capture</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">prior_screens_stack</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">MODE_TEST</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">MODE_PRODUCTION</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">MODE_DEVELOPMENT</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">EVENT_START_NEW_GAME</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">EVENT_ACTIVATE_PLATFORMING_2D_SCREEN</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">EVENT_ACTIVATE_ACHIEVEMENTS_SCREEN</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">EVENT_EXIT_ACHIEVEMENTS_SCREEN</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">EVENT_ACTIVATE_CREDITS_SCREEN</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">EVENT_CREDITS_SCREEN_FINISHED</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">EVENT_EXIT_GAME</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">EVENT_PAUSE_GAME</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">EVENT_UNPAUSE_GAME</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">refresh_blurry_background_screen_capture()</td>
</tr>
<tr>
  <td class="method">load_development_data()</td>
</tr>
<tr>
  <td class="method">load_test_data()</td>
</tr>
<tr>
  <td class="method">build_item_dictionary()</td>
</tr>
<tr>
  <td class="method">setup_platforming_2d_screen()</td>
</tr>
<tr>
  <td class="method">unlock_achievement(1)</td>
</tr>
<tr>
  <td class="method">push_screen()</td>
</tr>
<tr>
  <td class="method">pop_screen()</td>
</tr>
<tr>
  <td class="method">reactivate_prior_screen(1)</td>
</tr>
<tr>
  <td class="method">prior_screen_is_in_stack()</td>
</tr>
<tr>
  <td class="method">game_event_func(1)</td>
</tr>
<tr>
  <td class="method">run(1)</td>
</tr>
<tr>
  <td class="method">is_test_mode(1)</td>
</tr>
<tr>
  <td class="method">is_development_mode(1)</td>
</tr>
<tr>
  <td class="method">is_production_mode(1)</td>
</tr>
<tr>
  <td class="method">in_development_mode()</td>
</tr>
<tr>
  <td class="method">in_production_mode()</td>
</tr>
<tr>
  <td class="method">in_test_mode()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_UNLOCK_ACHIEVEMENT&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::TitleScreen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/TitleScreen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::PauseScreen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/PauseScreen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::StoryboardFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/StoryboardFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::GameWonScreen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/GameWonScreen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Screen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Screen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Screen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Screen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::TileDrive::Screen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/TileDrive/Screen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Configuration&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Configuration.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Achievements&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Achievements.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Frameworks::Full&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Frameworks/Full.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEvent&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEvent.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Storyboard&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Storyboard.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shader&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shader.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::CharacterNameInput&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/CharacterNameInput.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2DFactory&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2DFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::TileDrive::TerrainMeshDictionaryRecord&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/TileDrive/TerrainMeshDictionaryRecord.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Inventory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Inventory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InventoryDictionary&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InventoryDictionary.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InventoryDictionaryItems::WithAttributes&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InventoryDictionaryItems/WithAttributes.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ScreenCapture&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ScreenCapture.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EventNames&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::CollectItem&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectItem.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::CollectEvidence&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectEvidence.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::DialogEventDatas::CreateYouGotEvidenceDialog&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CreateYouGotEvidenceDialog.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::DialogEventDatas::CreateYouGotAnItemDialog&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CreateYouGotAnItemDialog.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::ScriptRunner&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;KrampusReturns::Gameplay::Screen&quot;, &quot;headers&quot;=&gt;[&quot;KrampusReturns/Gameplay/Screen.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/KrampusReturns/Shaders/AllegroDefault.q.yml">quintessence/KrampusReturns/Shaders/AllegroDefault.q.yml</h3>
     <table>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">activate()</td>
</tr>
<tr>
  <td class="private_method">obtain_vertex_source()</td>
</tr>
<tr>
  <td class="private_method">obtain_fragment_source()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shader&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shader.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/KrampusReturns/Shaders/Primary.q.yml">quintessence/KrampusReturns/Shaders/Primary.q.yml</h3>
     <table>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">tint</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">tint_intensity</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">activate()</td>
</tr>
<tr>
  <td class="private_method">set_values_to_activated_shader()</td>
</tr>
<tr>
  <td class="private_method">obtain_vertex_source()</td>
</tr>
<tr>
  <td class="private_method">obtain_fragment_source()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shader&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shader.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/KrampusReturns/Testing/Gym.q.yml">quintessence/KrampusReturns/Testing/Gym.q.yml</h3>
     <table>
<tr>
  <td class="property">framework</td>
  <td class="property">AllegroFlare::Frameworks::Full</td>
</tr>
<tr>
  <td class="property">entity_factory</td>
  <td class="property">KrampusReturns::EntityFactory</td>
</tr>
<tr>
  <td class="property">platforming_2d</td>
  <td class="property">KrampusReturns::Gameplay::Screen</td>
</tr>
<tr>
  <td class="property">animation_book</td>
  <td class="property">AllegroFlare::FrameAnimation::Book</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">SetUp()</td>
</tr>
<tr>
  <td class="method">run_gym()</td>
</tr>
<tr>
  <td class="method">TearDown()</td>
</tr>
<tr>
  <td class="method">get_any_font()</td>
</tr>
<tr>
  <td class="method">get_display_backbuffer()</td>
</tr>
<tr>
  <td class="method">sleep_for_frame()</td>
</tr>
<tr>
  <td class="method">sleep_for(1)</td>
</tr>
<tr>
  <td class="method">get_test_name()</td>
</tr>
<tr>
  <td class="method">get_test_suite_name()</td>
</tr>
<tr>
  <td class="method">build_full_test_name_str()</td>
</tr>
<tr>
  <td class="method">build_centered_placement(2)</td>
</tr>
<tr>
  <td class="method">draw_rulers()</td>
</tr>
<tr>
  <td class="method">draw_crosshair(4)</td>
</tr>
<tr>
  <td class="method">draw_horizontal_crosshair(5)</td>
</tr>
<tr>
  <td class="method">test_name_indicates_it_wants_a_screenshot()</td>
</tr>
<tr>
  <td class="method">clear_display()</td>
</tr>
<tr>
  <td class="method">clear()</td>
</tr>
<tr>
  <td class="method">capture_screenshot(1)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Testing::CustomComparison&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Testing/CustomComparison.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_init_primitives_addon&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_init_ttf_addon&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_ttf.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_init_font_addon&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_init_image_addon&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_image.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;:&quot;:testing::Test&quot;, &quot;headers&quot;=&gt;[&quot;gtest/gtest.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::chrono::milliseconds&quot;, &quot;headers&quot;=&gt;[&quot;chrono&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::this_thread::sleep_for&quot;, &quot;headers&quot;=&gt;[&quot;thread&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TerminalColors&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TerminalColors.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Frameworks::Full&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Frameworks/Full.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;KrampusReturns::Gameplay::Screen&quot;, &quot;headers&quot;=&gt;[&quot;KrampusReturns/Gameplay/Screen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;KrampusReturns::EntityFactory&quot;, &quot;headers&quot;=&gt;[&quot;KrampusReturns/EntityFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FrameAnimation::Book&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FrameAnimation/Book.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<h1>Dependents</h1>
<pre>
{
  "AllegroFlare/CameraControlStrategies2D/Base": [
    "KrampusReturns/CameraControlStrategies2D/SmoothSnapWithFX",
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D": [
    "KrampusReturns/CameraControlStrategies2D/SmoothSnapWithFX",
    "KrampusReturns/EntityFactory",
    "KrampusReturns/Gameplay/Screen"
  ],
  "fabs": [
    "KrampusReturns/CameraControlStrategies2D/SmoothSnapWithFX"
  ],
  "AllegroFlare/Useful": [
    "KrampusReturns/CameraControlStrategies2D/SmoothSnapWithFX"
  ],
  "AllegroFlare/Random": [
    "KrampusReturns/CameraControlStrategies2D/SmoothSnapWithFX"
  ],
  "std/max": [
    "KrampusReturns/CameraControlStrategies2D/SmoothSnapWithFX"
  ],
  "std/min": [
    "KrampusReturns/CameraControlStrategies2D/SmoothSnapWithFX"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/FrameAnimated2D": [
    "KrampusReturns/Entities/Blob",
    "KrampusReturns/Entities/Krampus"
  ],
  "sin": [
    "KrampusReturns/Entities/Blob",
    "KrampusReturns/Entities/Krampus"
  ],
  "AllegroFlare/Vec2D": [
    "KrampusReturns/Entities/Blob",
    "KrampusReturns/Gameplay/Screen"
  ],
  "std/rand": [
    "KrampusReturns/Entities/Blob"
  ],
  "AllegroFlare/EventEmitter": [
    "KrampusReturns/Entities/Krampus",
    "KrampusReturns/EntityFactory",
    "KrampusReturns/Gameplay/Screen",
    "KrampusReturns/Runner",
    "KrampusReturns/Shaders/Primary"
  ],
  "AllegroFlare/Errors": [
    "KrampusReturns/Entities/Krampus",
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory": [
    "KrampusReturns/EntityFactory",
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/Prototypes/Platforming2D/EntityFlagNames": [
    "KrampusReturns/EntityFactory",
    "KrampusReturns/Gameplay/Screen",
    "KrampusReturns/KrampusController"
  ],
  "KrampusReturns/Entities/Krampus": [
    "KrampusReturns/EntityFactory",
    "KrampusReturns/Gameplay/Screen",
    "KrampusReturns/KrampusController"
  ],
  "KrampusReturns/Entities/Blob": [
    "KrampusReturns/EntityFactory",
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/BitmapBin": [
    "KrampusReturns/Gameplay/Screen",
    "KrampusReturns/Shaders/Primary",
    "KrampusReturns/Testing/Gym"
  ],
  "AllegroFlare/FontBin": [
    "KrampusReturns/Gameplay/Screen",
    "KrampusReturns/Shaders/Primary",
    "KrampusReturns/Testing/Gym"
  ],
  "al_color_name": [
    "KrampusReturns/Gameplay/Screen",
    "KrampusReturns/Gameplay/Screen",
    "KrampusReturns/Testing/Gym"
  ],
  "std/map<int, int>": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/VirtualControls": [
    "KrampusReturns/Gameplay/Screen",
    "KrampusReturns/KrampusController"
  ],
  "AllegroFlare/VirtualControlsProcessor": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/TileMaps/PrimMeshAtlas": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/EventNames": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/Screen": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/Frameworks/Full": [
    "KrampusReturns/Gameplay/Screen",
    "KrampusReturns/Runner",
    "KrampusReturns/Testing/Gym"
  ],
  "AllegroFlare/Placement2D": [
    "KrampusReturns/Gameplay/Screen",
    "KrampusReturns/Testing/Gym"
  ],
  "AllegroFlare/vec2d": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/Physics/TileMapCollisionStepper": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/Physics/AABB2D": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/CameraControlStrategies2D/Snap": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/CameraControlStrategies2D/SmoothSnap": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/CameraControlStrategies2D/SmoothSnapWithZoomEffect": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/CameraControlStrategies2D/HorizontalRail": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/Prototypes/Platforming2D/EntityCollectionHelper": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/TileMaps/Basic2D": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/Doors/Basic2D": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "std/find": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "tan": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/TileMaps/PrimMesh": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/TileMaps/TileMap": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "ALLEGRO_EVENT": [
    "KrampusReturns/Gameplay/Screen",
    "KrampusReturns/Runner"
  ],
  "AllegroFlare/Display": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/GameEvent": [
    "KrampusReturns/Gameplay/Screen",
    "KrampusReturns/Runner"
  ],
  "AllegroFlare/Screens/Base": [
    "KrampusReturns/Gameplay/Screen",
    "KrampusReturns/Runner"
  ],
  "AllegroFlare/Camera2D": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "ALLEGRO_BITMAP": [
    "KrampusReturns/Gameplay/Screen",
    "KrampusReturns/Runner",
    "KrampusReturns/Testing/Gym"
  ],
  "ALLEGRO_FONT": [
    "KrampusReturns/Gameplay/Screen",
    "KrampusReturns/Testing/Gym",
    "KrampusReturns/Testing/Gym"
  ],
  "ALLEGRO_COLOR": [
    "KrampusReturns/Gameplay/Screen",
    "KrampusReturns/Runner",
    "KrampusReturns/Shaders/AllegroDefault",
    "KrampusReturns/Shaders/Primary",
    "KrampusReturns/Testing/Gym"
  ],
  "al_draw_text": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "KrampusReturns/Shaders/Primary": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "KrampusReturns/Shaders/AllegroDefault": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/Shader": [
    "KrampusReturns/Gameplay/Screen",
    "KrampusReturns/Runner",
    "KrampusReturns/Shaders/AllegroDefault",
    "KrampusReturns/Shaders/Primary"
  ],
  "KrampusReturns/KrampusController": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "KrampusReturns/CameraControlStrategies2D/SmoothSnapWithFX": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/Elements/HealthBars/Hearts": [
    "KrampusReturns/Gameplay/Screen"
  ],
  "AllegroFlare/Color": [
    "KrampusReturns/Gameplay/Screen",
    "KrampusReturns/Runner",
    "KrampusReturns/Runner"
  ],
  "ALLEGRO_FLARE_EVENT_UNLOCK_ACHIEVEMENT": [
    "KrampusReturns/Runner"
  ],
  "AllegroFlare/Screens/TitleScreen": [
    "KrampusReturns/Runner"
  ],
  "AllegroFlare/Screens/PauseScreen": [
    "KrampusReturns/Runner"
  ],
  "AllegroFlare/StoryboardFactory": [
    "KrampusReturns/Runner"
  ],
  "AllegroFlare/Screens/GameWonScreen": [
    "KrampusReturns/Runner"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/Screen": [
    "KrampusReturns/Runner"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Screen": [
    "KrampusReturns/Runner"
  ],
  "AllegroFlare/Prototypes/TileDrive/Screen": [
    "KrampusReturns/Runner"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/Configuration": [
    "KrampusReturns/Runner"
  ],
  "AllegroFlare/Screens/Achievements": [
    "KrampusReturns/Runner"
  ],
  "AllegroFlare/Screens/Storyboard": [
    "KrampusReturns/Runner"
  ],
  "AllegroFlare/Screens/CharacterNameInput": [
    "KrampusReturns/Runner"
  ],
  "Wicked/Entities/Basic2DFactory": [
    "KrampusReturns/Runner"
  ],
  "AllegroFlare/Prototypes/TileDrive/TerrainMeshDictionaryRecord": [
    "KrampusReturns/Runner"
  ],
  "AllegroFlare/Inventory": [
    "KrampusReturns/Runner"
  ],
  "AllegroFlare/InventoryDictionary": [
    "KrampusReturns/Runner"
  ],
  "AllegroFlare/InventoryDictionaryItems/WithAttributes": [
    "KrampusReturns/Runner"
  ],
  "AllegroFlare/ScreenCapture": [
    "KrampusReturns/Runner"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/EventNames": [
    "KrampusReturns/Runner"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectItem": [
    "KrampusReturns/Runner"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectEvidence": [
    "KrampusReturns/Runner"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CreateYouGotEvidenceDialog": [
    "KrampusReturns/Runner"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CreateYouGotAnItemDialog": [
    "KrampusReturns/Runner"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner": [
    "KrampusReturns/Runner"
  ],
  "KrampusReturns/Gameplay/Screen": [
    "KrampusReturns/Runner",
    "KrampusReturns/Testing/Gym"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper": [
    "KrampusReturns/Shaders/Primary"
  ],
  "AllegroFlare/Testing/CustomComparison": [
    "KrampusReturns/Testing/Gym"
  ],
  "al_init_primitives_addon": [
    "KrampusReturns/Testing/Gym"
  ],
  "al_init_ttf_addon": [
    "KrampusReturns/Testing/Gym"
  ],
  "al_init_font_addon": [
    "KrampusReturns/Testing/Gym"
  ],
  "al_init_image_addon": [
    "KrampusReturns/Testing/Gym"
  ],
  "ALLEGRO_DISPLAY": [
    "KrampusReturns/Testing/Gym",
    "KrampusReturns/Testing/Gym"
  ],
  ":testing/Test": [
    "KrampusReturns/Testing/Gym"
  ],
  "std/chrono/milliseconds": [
    "KrampusReturns/Testing/Gym"
  ],
  "std/this_thread/sleep_for": [
    "KrampusReturns/Testing/Gym"
  ],
  "AllegroFlare/TerminalColors": [
    "KrampusReturns/Testing/Gym"
  ],
  "KrampusReturns/EntityFactory": [
    "KrampusReturns/Testing/Gym"
  ],
  "AllegroFlare/FrameAnimation/Book": [
    "KrampusReturns/Testing/Gym"
  ]
}
</pre>
</body>