parent_classes:


  - class: AllegroFlare::Prototypes::Platforming2D::Entities::FrameAnimated2D
    scope: public
    init_with: ''


properties:


  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: state
    type: uint32_t
    init_with: STATE_UNDEF
    setter: false

  - name: state_changed_at
    type: float
    init_with: 0.0f

  - name: state_is_busy
    type: bool
    init_with: false

  - name: attack_hit_activated
    type: bool
    init_with: false

  - name: health
    type: int
    init_with: 5
    getter: true

  - name: max_health
    type: int
    init_with: 5
    getter: true

  - name: stunned_from_damage_at
    type: float
    init_with: 0.0

  - name: invincible_from_taking_damage_at
    type: float
    init_with: 0.0

  - name: invincible_from_taking_damage
    type: bool
    init_with: false

  - name: initialized
    type: bool
    init_with: false

  - name: STATE_UNDEF
    type: uint32_t
    init_with: 0
    static: true
    const: true
    constexpr: true

  - name: STATE_STANDING
    type: uint32_t
    init_with: 1
    static: true
    const: true
    constexpr: true

  - name: STATE_ATTACKING
    type: uint32_t
    init_with: 2
    static: true
    const: true
    constexpr: true

  - name: STATE_WALKING
    type: uint32_t
    init_with: 3
    static: true
    const: true
    constexpr: true

  - name: STATE_STUNNED_FROM_TAKING_DAMAGE
    type: uint32_t
    init_with: 4
    static: true
    const: true
    constexpr: true

  - name: STATE_DYING
    type: uint32_t
    init_with: 5
    static: true
    const: true
    constexpr: true

  - name: TYPE
    type: char*
    init_with: '(char*)"Entities/Krampus"'
    static: true
    constexpr: true


functions:


  - name: initialize
    guards: [ (!initialized) ]
    body: |
      get_place_ref().size = { 32, 6 };
      get_bitmap_placement_ref().scale = { 0.8, 0.8 };
      set_bitmap_alignment_strategy("bottom_centered");
      set_state(STATE_STANDING);
      initialized = true;
      return;


  - name: set_state
    type: bool
    private: true
    parameters:
      - name: state
        type: uint32_t
        default_argument: STATE_UNDEF
      - name: time_now
        type: float
        default_argument: al_get_time()
    body: |
      if (this->state == state) return false; // TODO: consider "override_if_same" option
      if (state_is_busy) return false;

      this->state = state;
      state_changed_at = time_now;

      switch (state)
      {
         case STATE_STANDING:
            set_animation("krampus");
            set_animation_playback_rate(1.0);
         break;

         case STATE_WALKING:
            set_animation("krampus");
            set_animation_playback_rate(1.7);
         break;

         case STATE_DYING:
            state_is_busy = true;
            set_animation("dying");
            invincible_from_taking_damage = true;
            get_velocity_ref().position.x = 0.0;
            get_velocity_ref().position.y = 0.0;
            set_animation_playback_rate(1.0);
            emit_player_died_event();
         break;

         case STATE_STUNNED_FROM_TAKING_DAMAGE:
            set_animation("take_damage");
            set_animation_playback_rate(1.0);
            get_velocity_ref().position.x = 0.0;
            get_velocity_ref().position.y = 0.0;
            state_is_busy = true;
            invincible_from_taking_damage = true;
            invincible_from_taking_damage_at = time_now;
            emit_bump_camera_shake_event();
            emit_take_damage_sound_effect();
         break;

         case STATE_ATTACKING:
            set_animation("attack");
            set_animation_playback_rate(1.0);
            get_velocity_ref().position.x = 0.0;
            get_velocity_ref().position.y = 0.0;
            state_is_busy = true;
            attack_hit_activated = false;
         break;

         default:
            AllegroFlare::Errors::throw_error("KrampusReturns::Entities::Krampus::set_state", "unhandled state");
         break;
      }

      return true;
    body_dependency_symbols:
      - AllegroFlare::Errors


  - name: update
    virtual: true
    override: true
    guards: [ event_emitter ]
    body: |
      static int ANIMATION_FRAME_NUM_ON_HIT = 3;
      float time_now = al_get_time();
      AllegroFlare::Prototypes::Platforming2D::Entities::FrameAnimated2D::update();
      if (infer_age_of(invincible_from_taking_damage_at, time_now) > 2.5) // TODO: replace 2.5 with "AGE*"
      {
         invincible_from_taking_damage = false;
      }

      switch (state)
      {
         case STATE_STANDING:
           // nothing
         break;

         case STATE_WALKING:
            {
               float bounce_counter = sin(time_now*34)*0.5 + 0.5;
               get_bitmap_placement_ref().anchor = { 0, bounce_counter * 3.0f };
            }
         break;

         case STATE_DYING:
            {
               //float bounce_counter = sin(time_now*34)*0.5 + 0.5;
               //get_bitmap_placement_ref().anchor = { 0, bounce_counter * 3.0f };
            }
         break;

         case STATE_STUNNED_FROM_TAKING_DAMAGE:
            {
               //if (get_animation_finished())
               //{
                  //set_animation("krampus");
               //}
               float age = infer_state_age(time_now);
               if (age > 0.5)
               {
                  state_is_busy = false;
                  set_state(STATE_STANDING);
               }
            }
         break;

         case STATE_ATTACKING:
            if (get_animation_finished())
            {
               state_is_busy = false;
               set_state(STATE_STANDING);
            }
            else if (!attack_hit_activated && (get_current_animation_frame_num() >= ANIMATION_FRAME_NUM_ON_HIT))
            {
               // TODO: add create emit damage zone
               emit_bump_camera_shake_event();
               emit_smash_club_sound_effect();
               attack_hit_activated = true;
            }
         break;
      }
     
      return;
    body_dependency_symbols:
      - sin


  - name: emit_bump_camera_shake_event
    guards: [ event_emitter ]
    body: |
      event_emitter->emit_game_event(AllegroFlare::GameEvent("camera_shake_bump"));


  - name: emit_smash_club_sound_effect
    guards: [ event_emitter ]
    body: |
      event_emitter->emit_play_sound_effect_event("smash_club");


  - name: emit_take_damage_sound_effect
    guards: [ event_emitter ]
    body: |
      event_emitter->emit_play_sound_effect_event("krampus_hit");


  - name: emit_player_died_event
    guards: [ event_emitter ]
    body: |
      event_emitter->emit_game_event(AllegroFlare::GameEvent("player_died"));


  - name: stand_still
    body: |
      if (state == STATE_STANDING || set_state(STATE_STANDING))
      {
         get_velocity_ref().position.x = 0.0;
         get_velocity_ref().position.y = 0.0;
      }
      return;


  - name: stand_still_x
    body: |
      //if (state == STATE_STANDING || set_state(STATE_STANDING))
      {
         get_velocity_ref().position.x = 0.0;
         //get_velocity_ref().position.y = 0.0;
      }
      return;


  - name: stand_still_y
    body: |
      //if (state == STATE_STANDING || set_state(STATE_STANDING))
      {
         //get_velocity_ref().position.x = 0.0;
         get_velocity_ref().position.y = 0.0;
      }
      return;


  - name: walk_right
    body: |
      face_right();
      if (state == STATE_WALKING || set_state(STATE_WALKING))
      {
         get_velocity_ref().position.x = 1.5;
      }
      return;


  - name: walk_up
    body: |
      if (state == STATE_WALKING || set_state(STATE_WALKING))
      {
         get_velocity_ref().position.y = -1.5;
      }
      return;


  - name: walk_down
    body: |
      if (state == STATE_WALKING || set_state(STATE_WALKING))
      {
         get_velocity_ref().position.y = 1.5;
      }
      return;


  - name: walk_left
    body: |
      face_left();
      if (state == STATE_WALKING || set_state(STATE_WALKING))
      {
         get_velocity_ref().position.x = -1.5;
      }
      return;


  - name: face_left
    body: |
      set_bitmap_flip_h(true);
      return;


  - name: face_right
    body: |
      set_bitmap_flip_h(false);
      return;


  - name: attack
    body: |
      if (state != STATE_ATTACKING) set_state(STATE_ATTACKING);
      return;


  - name: take_hit
    parameters:
      - name: damage
        type: int
        default_argument: 1
    body: |
      if (invincible_from_taking_damage) return;
      //if (state == STATE_STUNNED_FROM_TAKING_DAMAGE) return; // TODO: replace this with more recovery time

      health -= damage;

      if (health > 0)
      {
         set_state(STATE_STUNNED_FROM_TAKING_DAMAGE);
      }
      else
      {
         set_state(STATE_DYING);
      }
      return;


  - name: infer_state_age
    type: float
    parameters:
      - name: time_now
        type: float
        default_argument: al_get_time()
    body: |
      return time_now - state_changed_at;
    

  - name: infer_age_of
    type: float
    parameters:
      - name: event_at
        type: float
        default_argument: 0.0f
      - name: time_now
        type: float
        default_argument: al_get_time()
    body: |
      return time_now - event_at;
    

dependencies:


  - symbol: AllegroFlare::Prototypes::Platforming2D::Entities::FrameAnimated2D
    headers: [ AllegroFlare/Prototypes/Platforming2D/Entities/FrameAnimated2D.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::Errors
    headers: [ AllegroFlare/Errors.hpp ]
  - symbol: sin
    headers: [ cmath ]


