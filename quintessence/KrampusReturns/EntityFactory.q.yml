parent_classes:


  - class: AllegroFlare::Prototypes::Platforming2D::Entities::Basic2DFactory
    scope: public
    init_with: ''


properties:


  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    constructor_arg: true
    setter: true
    getter: true

  - name: init_entities_drawing_debug
    type: bool
    init_with: false
    setter: true
    getter: true


functions:


  - name: create_krampus
    type: KrampusReturns::Entities::Krampus*
    const: true
    parameters:
      - name: on_map
        type: std::string
        default_argument: '"[unset-on_map]"'
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
    guards: [ get_animation_book(), event_emitter ]
    body: |
      using namespace AllegroFlare::Prototypes::Platforming2D::EntityFlagNames;

      // dependencies

      KrampusReturns::Entities::Krampus *result = new KrampusReturns::Entities::Krampus();
      result->set_animation_book(get_animation_book());
      result->set_event_emitter(event_emitter);
      result->initialize();

      // location

      result->get_place_ref().position = { x, y };
      result->set(ON_MAP_NAME, on_map);

      if (init_entities_drawing_debug) result->set_draw_debug(true);
      //if (true) result->set_draw_debug(true);

      return result;
    body_dependency_symbols:
      - KrampusReturns::Entities::Krampus
      - AllegroFlare::Prototypes::Platforming2D::EntityFlagNames


  - name: create_blob
    const: true
    type: KrampusReturns::Entities::Blob*
    parameters:
      - name: on_map
        type: std::string
        default_argument: '"[unset-on_map]"'
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
    guards: [ get_animation_book() ]
    parameters:
    body: |
      using namespace AllegroFlare::Prototypes::Platforming2D::EntityFlagNames;

      KrampusReturns::Entities::Blob *result = new KrampusReturns::Entities::Blob();
      result->set_animation_book(get_animation_book());
      result->initialize();

      result->get_place_ref().position = { x, y };
      result->set(ON_MAP_NAME, on_map);

      if (init_entities_drawing_debug) result->set_draw_debug(true);
      //get_platforming_2d_ref().add_entity_to_pool(result);
      return result;
    body_dependency_symbols:
      - KrampusReturns::Entities::Blob
      - AllegroFlare::Prototypes::Platforming2D::EntityFlagNames


  - name: create_goalpost
    type: KrampusReturns::Entities::Goalpost*
    const: true
    parameters:
      - name: on_map
        type: std::string
        default_argument: '"[unset-on_map]"'
      - name: goalpost_id
        type: int
        default_argument: -1
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
    guards: [ get_animation_book() ]
    parameters:
    body: |
      using namespace AllegroFlare::Prototypes::Platforming2D::EntityFlagNames;

      KrampusReturns::Entities::Goalpost *result = new KrampusReturns::Entities::Goalpost();
      result->set_animation_book(get_animation_book());
      result->set("goalpost_id", goalpost_id);
      result->initialize();

      result->get_place_ref().position = { x, y };
      result->set(ON_MAP_NAME, on_map);

      if (init_entities_drawing_debug) result->set_draw_debug(true);
      //get_platforming_2d_ref().add_entity_to_pool(result);
      return result;
    body_dependency_symbols:
      - KrampusReturns::Entities::Goalpost
      - AllegroFlare::Prototypes::Platforming2D::EntityFlagNames


  - name: create_spawn_point
    type: KrampusReturns::Entities::SpawnPoint*
    const: true
    parameters:
      - name: on_map
        type: std::string
        default_argument: '"[unset-on_map]"'
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
    guards: [ get_animation_book() ]
    parameters:
    body: |
      using namespace AllegroFlare::Prototypes::Platforming2D::EntityFlagNames;

      KrampusReturns::Entities::SpawnPoint *result = new KrampusReturns::Entities::SpawnPoint();
      result->set_animation_book(get_animation_book());
      //result->set("goalpost_id", goalpost_id);
      result->initialize();

      result->get_place_ref().position = { x, y };
      result->set(ON_MAP_NAME, on_map);

      if (init_entities_drawing_debug) result->set_draw_debug(true);
      //get_platforming_2d_ref().add_entity_to_pool(result);
      return result;
    body_dependency_symbols:
      - KrampusReturns::Entities::SpawnPoint
      - AllegroFlare::Prototypes::Platforming2D::EntityFlagNames


  - name: create_flash_fx1
    type: KrampusReturns::Entities::FlashEffect*
    const: true
    parameters:
      - name: on_map
        type: std::string
        default_argument: '"[unset-on_map]"'
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
    guards: [ get_animation_book() ]
    parameters:
    body: |
      using namespace AllegroFlare::Prototypes::Platforming2D::EntityFlagNames;

      KrampusReturns::Entities::FlashEffect *result = new KrampusReturns::Entities::FlashEffect();
      result->set_animation_book(get_animation_book());
      result->initialize();

      // NOTE: for the time being FlashEffect sets the animation on initialization, so in this factory method
      // it's set here to build the object:
      result->set_animation("flash_fx1");

      result->get_place_ref().position = { x, y };
      result->set(ON_MAP_NAME, on_map);

      if (init_entities_drawing_debug) result->set_draw_debug(true);
      //get_platforming_2d_ref().add_entity_to_pool(result);
      return result;
    body_dependency_symbols:
      - KrampusReturns::Entities::Goalpost
      - AllegroFlare::Prototypes::Platforming2D::EntityFlagNames


dependencies:


  - symbol: AllegroFlare::Prototypes::Platforming2D::Entities::Basic2DFactory
    headers: [ AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory.hpp ]
  - symbol: AllegroFlare::Prototypes::Platforming2D::EntityFlagNames
    headers: [ AllegroFlare/Prototypes/Platforming2D/EntityFlagNames.hpp ]
  - symbol: AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D
    headers: [ AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp ]
  - symbol: KrampusReturns::Entities::Krampus
    headers: [ KrampusReturns/Entities/Krampus.hpp ]
  - symbol: KrampusReturns::Entities::Blob
    headers: [ KrampusReturns/Entities/Blob.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: KrampusReturns::Entities::Goalpost
    headers: [ KrampusReturns/Entities/Goalpost.hpp ]
  - symbol: KrampusReturns::Entities::FlashEffect
    headers: [ KrampusReturns/Entities/FlashEffect.hpp ]
  - symbol: KrampusReturns::Entities::SpawnPoint
    headers: [ KrampusReturns/Entities/SpawnPoint.hpp ]


