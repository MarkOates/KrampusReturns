parent_classes:


  - class: AllegroFlare::Prototypes::Platforming2D::Entities::Basic2DFactory
    scope: public
    init_with: ''


properties:


  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    constructor_arg: true
    setter: true
    getter: true

  - name: init_entities_drawing_debug
    type: bool
    init_with: false
    setter: true
    getter: true


functions:


  - name: create_krampus
    type: KrampusReturns::Entities::Krampus*
    const: true
    parameters:
      - name: on_map
        type: std::string
        default_argument: '"[unset-on_map]"'
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
    guards: [ get_animation_book(), event_emitter ]
    body: |
      using namespace AllegroFlare::Prototypes::Platforming2D::EntityFlagNames;

      // dependencies

      KrampusReturns::Entities::Krampus *result = new KrampusReturns::Entities::Krampus();
      result->set_animation_book(get_animation_book());
      result->set_event_emitter(event_emitter);
      result->initialize();

      // location

      result->get_place_ref().position = { x, y };
      result->set(ON_MAP_NAME, on_map);

      if (init_entities_drawing_debug) result->set_draw_debug(true);
      //if (true) result->set_draw_debug(true);

      return result;
    body_dependency_symbols:
      - KrampusReturns::Entities::Krampus
      - AllegroFlare::Prototypes::Platforming2D::EntityFlagNames


  - name: create_goalpost
    type: KrampusReturns::Entities::Goalpost*
    const: true
    parameters:
      - name: on_map
        type: std::string
        default_argument: '"[unset-on_map]"'
      - name: goalpost_id
        type: int
        default_argument: -1
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
    guards: [ get_animation_book() ]
    parameters:
    body: |
      using namespace AllegroFlare::Prototypes::Platforming2D::EntityFlagNames;

      KrampusReturns::Entities::Goalpost *result = new KrampusReturns::Entities::Goalpost();
      result->set_animation_book(get_animation_book());
      result->set("goalpost_id", goalpost_id);
      result->set_animation("gift");
      result->initialize();

      result->get_place_ref().position = { x, y };
      result->set(ON_MAP_NAME, on_map);

      if (init_entities_drawing_debug) result->set_draw_debug(true);
      //get_platforming_2d_ref().add_entity_to_pool(result);
      return result;
    body_dependency_symbols:
      - KrampusReturns::Entities::Goalpost
      - AllegroFlare::Prototypes::Platforming2D::EntityFlagNames


  - name: create_spawn_point
    type: KrampusReturns::Entities::SpawnPoint*
    const: true
    parameters:
      - name: on_map
        type: std::string
        default_argument: '"[unset-on_map]"'
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
    guards: [ get_animation_book() ]
    parameters:
    body: |
      using namespace AllegroFlare::Prototypes::Platforming2D::EntityFlagNames;

      KrampusReturns::Entities::SpawnPoint *result = new KrampusReturns::Entities::SpawnPoint();
      result->set_animation_book(get_animation_book());
      result->initialize();

      result->get_place_ref().position = { x, y };
      result->set(ON_MAP_NAME, on_map);

      if (init_entities_drawing_debug) result->set_draw_debug(true);
      //get_platforming_2d_ref().add_entity_to_pool(result);
      return result;
    body_dependency_symbols:
      - KrampusReturns::Entities::SpawnPoint
      - AllegroFlare::Prototypes::Platforming2D::EntityFlagNames


  - name: create_flash_fx1
    type: KrampusReturns::Entities::FlashEffect*
    const: true
    parameters:
      - name: on_map
        type: std::string
        default_argument: '"[unset-on_map]"'
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
    guards: [ get_animation_book() ]
    parameters:
    body: |
      using namespace AllegroFlare::Prototypes::Platforming2D::EntityFlagNames;

      KrampusReturns::Entities::FlashEffect *result = new KrampusReturns::Entities::FlashEffect();
      result->set_animation_book(get_animation_book());
      result->initialize();

      // NOTE: for the time being FlashEffect sets the animation on initialization, so in this factory method
      // it's set here to build the object:
      result->set_animation("flash_fx1");
      result->set("noshadow");

      result->get_place_ref().position = { x, y };
      result->set(ON_MAP_NAME, on_map);

      if (init_entities_drawing_debug) result->set_draw_debug(true);
      //get_platforming_2d_ref().add_entity_to_pool(result);
      return result;
    body_dependency_symbols:
      - KrampusReturns::Entities::Goalpost
      - AllegroFlare::Prototypes::Platforming2D::EntityFlagNames


  - name: create_blob
    const: true
    type: KrampusReturns::Entities::Blob*
    parameters:
      - name: on_map
        type: std::string
        default_argument: '"[unset-on_map]"'
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
    guards: [ get_animation_book() ]
    parameters:
    body: |
      using namespace AllegroFlare::Prototypes::Platforming2D::EntityFlagNames;

      KrampusReturns::Entities::Blob *result = new KrampusReturns::Entities::Blob();
      result->set_animation_book(get_animation_book());
      result->initialize();

      result->get_place_ref().position = { x, y };
      result->set(ON_MAP_NAME, on_map);

      result->set("damages_player");
      result->set("takes_damage_from_player_damage_zones");

      result->set("--blob");

      if (init_entities_drawing_debug) result->set_draw_debug(true);
      //get_platforming_2d_ref().add_entity_to_pool(result);
      return result;
    body_dependency_symbols:
      - KrampusReturns::Entities::Blob
      - AllegroFlare::Prototypes::Platforming2D::EntityFlagNames


  - name: create_skeleton_enemy
    type: ChatGPT::Enemy*
    const: true
    parameters:
      - name: on_map
        type: std::string
        default_argument: '"[unset-on_map]"'
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
      - name: animation
        type: std::string
        default_argument: '"[unset-animation]"'
    body: |
      using namespace AllegroFlare::Prototypes::Platforming2D::EntityFlagNames;
      //AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::Base
      //AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::ReflectOffWalls
      //headers: [ AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/ReflectOffWalls.hpp ]

      int max_health = 3;
      int health = max_health;
      int attack = 1;
      ChatGPT::Enemy* result = new ChatGPT::Enemy(max_health, health, attack);
      result->set_animation_book(get_animation_book());
      result->set_animation(animation);
      result->get_place_ref().size = { 12, 4 };
      result->get_place_ref().scale = { 0.8, 0.8 };
      result->set_bitmap_alignment_strategy("bottom_centered");

      // NOTE: this class now needs a proper destruct process
      result->set_movement_strategy(
         //new AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::ReflectOffWalls(result)
         new ChatGPT::RandomWanderer(result, 0.5)
         //new ChatGPT::Seeker(result, 0.01)
      );

      result->set("damages_player");
      result->set("takes_damage_from_player_damage_zones");
      result->set("--skeleton");

      result->get_place_ref().position = { x, y };
      result->set(ON_MAP_NAME, on_map);
      return result;
    body_dependency_symbols:
      - AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::ReflectOffWalls
      - ChatGPT::RandomWanderer
      - ChatGPT::Seeker


  - name: create_flaming_skull_enemy
    type: ChatGPT::Enemy*
    const: true
    parameters:
      - name: on_map
        type: std::string
        default_argument: '"[unset-on_map]"'
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
      - name: animation
        type: std::string
        default_argument: '"[unset-animation]"'
      - name: target
        type: AllegroFlare::Prototypes::Platforming2D::Entities::FrameAnimated2D*
        default_argument: nullptr
    body: |
      using namespace AllegroFlare::Prototypes::Platforming2D::EntityFlagNames;
      //AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::Base
      //AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::ReflectOffWalls
      //headers: [ AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/ReflectOffWalls.hpp ]

      int max_health = 2;
      int health = max_health;
      int attack = 1;
      ChatGPT::Enemy* result = new ChatGPT::Enemy(max_health, health, attack);
      result->set_animation_book(get_animation_book());
      result->get_place_ref().size = { 8, 4 };
      result->get_place_ref().scale = { 0.8, 0.8 };
      result->set_animation(animation);
      result->set_bitmap_alignment_strategy("bottom_centered");

      // NOTE: this class now needs a proper destruct property
      result->set_movement_strategy(
         //new AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::ReflectOffWalls(result)
         //new ChatGPT::RandomWanderer(result, 1)
         new ChatGPT::Seeker(result, target, 1.0)
      );

      result->set("damages_player");
      result->set("takes_damage_from_player_damage_zones");
      result->set("--flaming_skull");

      result->get_place_ref().position = { x, y };
      result->set(ON_MAP_NAME, on_map);
      result->set("seeker");
      return result;
    body_dependency_symbols:
      - AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::ReflectOffWalls
      - ChatGPT::RandomWanderer
      - ChatGPT::Seeker


  - name: create_flaming_skull_red_enemy
    type: ChatGPT::Enemy*
    const: true
    parameters:
      - name: on_map
        type: std::string
        default_argument: '"[unset-on_map]"'
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
      - name: animation
        type: std::string
        default_argument: '"[unset-animation]"'
      - name: target
        type: AllegroFlare::Prototypes::Platforming2D::Entities::FrameAnimated2D*
        default_argument: nullptr
    body: |
      using namespace AllegroFlare::Prototypes::Platforming2D::EntityFlagNames;
      //AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::Base
      //AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::ReflectOffWalls
      //headers: [ AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/ReflectOffWalls.hpp ]

      int max_health = 5;
      int health = max_health;
      int attack = 1;
      ChatGPT::Enemy* result = new ChatGPT::Enemy(max_health, health, attack);
      result->set_animation_book(get_animation_book());
      result->get_place_ref().size = { 16, 8 };
      result->get_place_ref().scale = { 0.9, 0.9 };
      result->set_animation(animation);
      result->set_bitmap_alignment_strategy("bottom_centered");

      // NOTE: this class now needs a proper destruct property
      result->set_movement_strategy(
         //new AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::ReflectOffWalls(result)
         //new ChatGPT::RandomWanderer(result, 1)
         new ChatGPT::Seeker(result, target, 1.0)
      );

      result->set("damages_player");
      result->set("takes_damage_from_player_damage_zones");
      result->set("--flaming_skull_red");

      result->get_place_ref().position = { x, y };
      result->set(ON_MAP_NAME, on_map);
      result->set("seeker");
      return result;
    body_dependency_symbols:
      - AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::ReflectOffWalls
      - ChatGPT::RandomWanderer
      - ChatGPT::Seeker


  - name: create_skull_head_boss_enemy
    type: ChatGPT::Enemy*
    const: true
    parameters:
      - name: on_map
        type: std::string
        default_argument: '"[unset-on_map]"'
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
      - name: area_width
        type: float
        default_argument: 0.0f
      - name: area_height
        type: float
        default_argument: 0.0f
      - name: animation
        type: std::string
        default_argument: '"[unset-animation]"'
      - name: target
        type: AllegroFlare::Prototypes::Platforming2D::Entities::FrameAnimated2D*
        default_argument: nullptr
    body: |
      using namespace AllegroFlare::Prototypes::Platforming2D::EntityFlagNames;
      //AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::Base
      //AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::ReflectOffWalls
      //headers: [ AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/ReflectOffWalls.hpp ]

      int max_health = 20;
      int health = max_health;
      int attack = 1;
      ChatGPT::Enemy* result = new ChatGPT::Enemy(max_health, health, attack);
      result->set_animation_book(get_animation_book());
      result->set_animation(animation);
      result->set_bitmap_alignment_strategy("bottom_centered");

      // NOTE: this class now needs a proper destruct property
      result->set_movement_strategy(
         //new AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::ReflectOffWalls(result)
         //new ChatGPT::RandomWanderer(result, 1)
         new ChatGPT::Teleporting(result, { x, y }, { area_width, area_height })
      );

      result->set("damages_player");
      result->set("takes_damage_from_player_damage_zones");
      result->set("--boss");

      result->get_place_ref().position = { x, y };
      result->set(ON_MAP_NAME, on_map);
      //result->set("seeker");
      return result;
    body_dependency_symbols:
      - AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::ReflectOffWalls
      - ChatGPT::RandomWanderer
      - ChatGPT::Seeker
      - ChatGPT::Teleporting


  - name: create_damage_zone_by_player
    type: KrampusReturns::Entities::DamageZone*
    parameters:
      - name: on_map
        type: std::string
        default_argument: '"[unset-on_map]"'
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
      - name: w
        type: float
        default_argument: 20.0f
      - name: h
        type: float
        default_argument: 8.0f
      - name: damage
        type: int
        default_argument: 1
      - name: direction_of_force
        type: uint32_t
        default_argument: KrampusReturns::Entities::DamageZone::DIRECTION_OF_FORCE_UNDEF
    body: |
      using namespace AllegroFlare::Prototypes::Platforming2D::EntityFlagNames;

      KrampusReturns::Entities::DamageZone* result = new KrampusReturns::Entities::DamageZone(damage);
      result->set("damages_enemies");
      result->set("is_DamageZone_class");
      result->set(EPHEMERAL);

      // HACK: these two lines to set the animation book, even though it's not needed.
      result->set_animation_book(get_animation_book());
      result->set_animation("shadow_small");
      result->set_bitmap_alignment_strategy("bottom_centered");

      // TESTING DEBUG
      result->set_draw_debug(true);

      result->get_place_ref().position = { x, y };
      result->get_place_ref().size = { w, h };
      result->get_place_ref().align = { 0.5, 0.5 }; // conceptually, the "position" is the central point of impact.
      result->set(ON_MAP_NAME, on_map);
      return result;


  - name: create_attack_up_item
    type: AllegroFlare::Prototypes::Platforming2D::Entities::FrameAnimated2D*
    const: true
    parameters:
      - name: map_name
        type: std::string
        default_argument: '"[map-name-not-set]"'
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
    body: |
      return _create_collectable(map_name, x, y, "attack_up", "generic_powerup");


  - name: create_full_health_item
    type: AllegroFlare::Prototypes::Platforming2D::Entities::FrameAnimated2D*
    const: true
    parameters:
      - name: map_name
        type: std::string
        default_argument: '"[map-name-not-set]"'
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
    body: |
      return _create_collectable(map_name, x, y, "full_health", "full_health");


  - name: _create_collectable
    type: AllegroFlare::Prototypes::Platforming2D::Entities::FrameAnimated2D*
    const: true
    private: true
    parameters:
      - name: map_name
        type: std::string
        default_argument: '"[map-name-not-set]"'
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
      - name: type_name
        type: std::string
        default_argument: '"[unset-type_name]"'
      - name: animation
        type: std::string
        default_argument: '"generic_powerup"'
    body: |
      using namespace AllegroFlare::Prototypes::Platforming2D::EntityFlagNames;

      // create the entity
      AllegroFlare::Prototypes::Platforming2D::Entities::FrameAnimated2D *result =
         new AllegroFlare::Prototypes::Platforming2D::Entities::FrameAnimated2D;
      result->get_place_ref().size.x = 32.0f;
      result->get_place_ref().size.y = 15.0f;
      result->get_place_ref().position.x = x;
      result->get_place_ref().position.y = y;

      result->get_place_ref().scale = { 0.7, 0.7 };

      result->set_animation_book(get_animation_book());
      result->set_animation(animation);
      result->set_bitmap_alignment_strategy("bottom_centered");

      // give it a noticable box color
      //result->set_debug_box_color(get_player_collectable_box_color());

      result->set(COLLECTABLE_BY_PLAYER);
      result->set(ON_MAP_NAME, map_name);
      result->set("collectable_type", type_name);
      //result->set("type", type_name);

      // return the collectable entity
      if (init_entities_drawing_debug) result->set_draw_debug(true);
      return result;



dependencies:


  - symbol: AllegroFlare::Prototypes::Platforming2D::Entities::Basic2DFactory
    headers: [ AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory.hpp ]
  - symbol: AllegroFlare::Prototypes::Platforming2D::EntityFlagNames
    headers: [ AllegroFlare/Prototypes/Platforming2D/EntityFlagNames.hpp ]
  - symbol: AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D
    headers: [ AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp ]
  - symbol: KrampusReturns::Entities::Krampus
    headers: [ KrampusReturns/Entities/Krampus.hpp ]
  - symbol: KrampusReturns::Entities::Blob
    headers: [ KrampusReturns/Entities/Blob.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: KrampusReturns::Entities::Goalpost
    headers: [ KrampusReturns/Entities/Goalpost.hpp ]
  - symbol: KrampusReturns::Entities::FlashEffect
    headers: [ KrampusReturns/Entities/FlashEffect.hpp ]
  - symbol: KrampusReturns::Entities::SpawnPoint
    headers: [ KrampusReturns/Entities/SpawnPoint.hpp ]
  - symbol: KrampusReturns::EntityFactory
    headers: [ KrampusReturns/EntityFactory.hpp ]
  - symbol: ChatGPT::Enemy
    headers: [ ChatGPT/Enemy.hpp ]
  - symbol: AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::ReflectOffWalls
    headers: [ AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/ReflectOffWalls.hpp ]
  - symbol: ChatGPT::RandomWanderer
    headers: [ ChatGPT/RandomWanderer.hpp ]
  - symbol: ChatGPT::Seeker
    headers: [ ChatGPT/Seeker.hpp ]
  - symbol: AllegroFlare::Prototypes::Platforming2D::Entities::FrameAnimated2D
    headers: [ AllegroFlare/Prototypes/Platforming2D/Entities/FrameAnimated2D.hpp ]
  - symbol: ChatGPT::Teleporting
    headers: [ ChatGPT/Teleporting.hpp ]
  - symbol: KrampusReturns::Entities::DamageZone
    headers: [ KrampusReturns/Entities/DamageZone.hpp ]


