properties:


  - name: player_controls
    type: AllegroFlare::VirtualControls
    init_with: ''

  - name: krampus
    type: KrampusReturns::Entities::Krampus*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true


functions:


  - name: reset
    body: |
      player_controls.clear();


  - name: key_up_func
    virtual: true
    parameters:
      - name: al_key_num
        type: int
        default_argument: 0
      - name: is_repeat
        type: bool
        default_argument: false
    guards: [ krampus ]
    body: |
      switch (al_key_num)
      {
         case ALLEGRO_KEY_LEFT:
            player_controls.set_left_button_pressed(false);
         break;

         case ALLEGRO_KEY_RIGHT:
            player_controls.set_right_button_pressed(false);
         break;

         case ALLEGRO_KEY_UP:
            player_controls.set_up_button_pressed(false);
         break;

         case ALLEGRO_KEY_DOWN:
            player_controls.set_down_button_pressed(false);
         break;
      }
      return;


  - name: key_down_func
    virtual: true
    parameters:
      - name: al_key_num
        type: int
        default_argument: 0
      - name: is_repeat
        type: bool
        default_argument: false
    guards: [ krampus ]
    body: |
      switch (al_key_num)
      {
         case ALLEGRO_KEY_LEFT:
            player_controls.set_left_button_pressed(true);
         break;

         case ALLEGRO_KEY_RIGHT:
            player_controls.set_right_button_pressed(true);
         break;

         case ALLEGRO_KEY_UP:
            player_controls.set_up_button_pressed(true);
         break;

         case ALLEGRO_KEY_DOWN:
            player_controls.set_down_button_pressed(true);
         break;

         case ALLEGRO_KEY_SPACE:
            krampus->attack();
            //jump();
         break;
      }
      return;


  - name: update
    guards: [ krampus ]
    body: |
      using namespace AllegroFlare::Prototypes::Platforming2D::EntityFlagNames;

      // if this block is active, the player cannot control themselves while in the air, only when on the ground:
      //if (krampus->exists(ADJACENT_TO_FLOOR))
      //{
         //krampus->get_velocity_ref().position.x = 0.0;
      //}

      if (player_controls.get_right_bumper_pressed())
      {
         // player character is in a defensive position and not moving (or, they're aiming and not moving)
         krampus->get_velocity_ref().position.x = 0.0;
         krampus->get_velocity_ref().position.y = 0.0;
      }
      else
      {
         // if this block is active, the player cannot control themselves while in the air, only when on the ground:
         // NOTE: previously, being ajacent to the floor would stop the player from moving unless
         // they have a movment control button pressed
         //if (krampus->exists(ADJACENT_TO_FLOOR))
         //{
            //krampus->get_velocity_ref().position.x = 0.0;
            //krampus->get_velocity_ref().position.y = 0.0;
         //}


            bool moving_x = false;

            if (player_controls.get_right_button_pressed())
            {
               krampus->walk_right();
               moving_x = true;
            }
            if (player_controls.get_left_button_pressed())
            {
               krampus->walk_left();
               moving_x = true;
            }


            bool moving_y = false;

            if (player_controls.get_up_button_pressed())
            {
               krampus->walk_up();
               moving_y = true;
            }
            if (player_controls.get_down_button_pressed())
            {
               krampus->walk_down();
               moving_y = true;
            }

  
            if (!moving_x && !moving_y)
            {
               krampus->stand_still();
            }
            else if (!moving_x)
            {
               krampus->stand_still_x();
            }
            else if (!moving_y)
            {
               krampus->stand_still_y();
            }
      }
      return;
    body_dependency_symbols:
      - AllegroFlare::Prototypes::Platforming2D::EntityFlagNames


  - name: jump
    private: true
    body: |
      using namespace AllegroFlare::Prototypes::Platforming2D::EntityFlagNames;


      if (!krampus) return;
      if (krampus->exists(ADJACENT_TO_FLOOR))
      {
         krampus->get_velocity_ref().position.y -= 4.25;
      }
      else if (krampus->exists(ADJACENT_TO_LEFT_WALL))
      {
         krampus->get_velocity_ref().position.y = -3.5;
         krampus->get_velocity_ref().position.x = 3.0;
      }
      else if (krampus->exists(ADJACENT_TO_RIGHT_WALL))
      {
         krampus->get_velocity_ref().position.y = -3.5;
         krampus->get_velocity_ref().position.x = -3.0;
      }
      return;
    body_dependency_symbols:
      - AllegroFlare::Prototypes::Platforming2D::EntityFlagNames


dependencies:


  - symbol: KrampusReturns::Entities::Krampus
    headers: [ KrampusReturns/Entities/Krampus.hpp ]
  - symbol: AllegroFlare::VirtualControls
    headers: [ AllegroFlare/VirtualControls.hpp ]
  - symbol: AllegroFlare::Prototypes::Platforming2D::EntityFlagNames
    headers: [ AllegroFlare/Prototypes/Platforming2D/EntityFlagNames.hpp ]


