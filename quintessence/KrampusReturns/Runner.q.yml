parent_classes:


  - class: AllegroFlare::Screens::Base
    scope: public
    init_with: '"Runner"'


properties:


  - name: mode
    type: std::string
    init_with: MODE_PRODUCTION
    constructor_arg: true

  - name: framework
    type: AllegroFlare::Frameworks::Full*
    init_with: nullptr
    constructor_arg: true

  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    constructor_arg: true

  - name: opening_logos_storyboard_screen
    type: AllegroFlare::Screens::Storyboard*
    init_with: nullptr

  - name: title_screen
    type: AllegroFlare::Screens::TitleScreen
    init_with: ''

  - name: pause_screen
    type: AllegroFlare::Screens::PauseScreen
    init_with: ''

  - name: new_game_intro_storyboard_screen
    type: AllegroFlare::Screens::Storyboard*
    init_with: nullptr

  - name: platforming_2d_screen
    type: KrampusReturns::Gameplay::Screen
    init_with: ''

  - name: achievements_screen
    type: AllegroFlare::Screens::Achievements
    init_with: ''

  - name: credits_screen
    type: AllegroFlare::Screens::Storyboard*
    init_with: nullptr

  - name: blurry_background_screen_capture
    type: ALLEGRO_BITMAP*
    init_with: nullptr

  - name: prior_screens_stack
    type: std::vector<std::string>
    init_with: ''

  - name: initialized
    type: bool
    init_with: false

  - name: MODE_TEST
    type: char*
    init_with: '"test"'
    static: true
    constexpr: true

  - name: MODE_PRODUCTION
    type: char*
    init_with: '"production"'
    static: true
    constexpr: true

  - name: MODE_DEVELOPMENT
    type: char*
    init_with: '"development"'
    static: true
    constexpr: true

  - name: EVENT_START_NEW_GAME
    type: char*
    init_with: '"event_start_new_game"'
    static: true
    constexpr: true

  - name: EVENT_ACTIVATE_PLATFORMING_2D_SCREEN
    type: char*
    init_with: '"activate_platforming_2d_screen"'
    static: true
    constexpr: true

  - name: EVENT_ACTIVATE_ACHIEVEMENTS_SCREEN
    type: char*
    init_with: '"activate_achievements_screen"'
    static: true
    constexpr: true

  - name: EVENT_EXIT_ACHIEVEMENTS_SCREEN
    type: char*
    init_with: '"exit_achievements_screen"'
    static: true
    constexpr: true

  - name: EVENT_ACTIVATE_CREDITS_SCREEN
    type: char*
    init_with: '"activate_credits_screen"'
    static: true
    constexpr: true

  - name: EVENT_CREDITS_SCREEN_FINISHED
    type: char*
    init_with: '"credits_screen_finished"'
    static: true
    constexpr: true

  - name: EVENT_EXIT_GAME
    type: char*
    init_with: '"exit_game"'
    static: true
    constexpr: true

  - name: EVENT_PAUSE_GAME
    type: char*
    init_with: '"pause_game"'
    static: true
    constexpr: true

  - name: EVENT_UNPAUSE_GAME
    type: char*
    init_with: '"unpause_game"'
    static: true
    constexpr: true

  - name: THIS_CLASS
    type: char*
    init_with: '(char*)"KrampusReturns::Runner"'
    static: true
    constexpr: true


functions:


  - name: initialize
    guards: [ (!initialized), framework ]
    body: |
      // setup the bin paths
      AllegroFlare::FontBin &font_bin = framework->get_font_bin_ref();
      AllegroFlare::BitmapBin &bitmap_bin = framework->get_bitmap_bin_ref();
      AllegroFlare::SampleBin &sample_bin = framework->get_sample_bin_ref();
      AllegroFlare::ModelBin &model_bin = framework->get_model_bin_ref();
      AllegroFlare::EventEmitter &event_emitter = framework->get_event_emitter_ref();
      AllegroFlare::AudioController &audio_controller = framework->get_audio_controller_ref();
      AllegroFlare::Achievements &achievements = framework->get_achievements_ref();


      // setup the achievements
      achievements.set_achievements({
         //{ "free_seat", { new AllegroFlare::Achievement("Free Seat at the Concert"), false, false } },
         //{ "start_the_game", { new AllegroFlare::Achievement("In Da House"), false, false } },
         //{ "do_thing", { new AllegroFlare::Achievement("Save the Zoo", "Will unhide when achieved"), false, false } },
         //{ "a_hidden_gem2", { new AllegroFlare::Achievement("Hidden Gem", "Will unhide when achieved"), false, true } },
         { "stay_through_the_credits", { new AllegroFlare::Achievement(
            "Stay Through the Credits",
            "Watch the credits"), false, false } },
      });


      // setup our helper factories
      AllegroFlare::StoryboardFactory storyboard_factory(&font_bin, &event_emitter);


      // create the opening logos storyboard screen
      opening_logos_storyboard_screen = storyboard_factory.create_images_storyboard_screen({
            bitmap_bin["allegro5-logo-gray-med.png"],
            bitmap_bin["clubcatt-med-01.png"],
            nullptr,
         });
      opening_logos_storyboard_screen->set_game_event_name_to_emit_after_completing("start_title_screen");
      framework->register_screen("opening_logos_storyboard_screen", opening_logos_storyboard_screen);


      // pre-load the audio controller (TODO)
      audio_controller.set_and_load_sound_effect_elements({
         { "smash_club", { "smash-club-01.ogg", false, "restart" } },
         { "krampus_hit", { "krampus_hit.ogg", false, "restart" } },
      });


      audio_controller.set_and_load_music_track_elements({
        { "intro_music", { "krampus-intro-1.wav", false } },
        { "win_music", { "win-music-01.ogg", false, "restart" } },
      });



      // setup the title screen
      title_screen.set_font_bin(&font_bin);
      title_screen.set_bitmap_bin(&bitmap_bin);
      title_screen.set_title_text("KRAMPUS RETURNS");
      title_screen.set_title_text_color(AllegroFlare::Color(AllegroFlare::Color::AliceBlue, 1.0).to_al());
      title_screen.set_title_font_size(-130);
      title_screen.set_font_name("ChronoTrigger.ttf");
      //title_screen.set_title_text_color(AllegroFlare::Color(0x000000, 1.0).to_al());
      //title_screen.set_background_bitmap_name("placeholder-title-background.jpg");
      title_screen.set_event_emitter(&event_emitter);
      title_screen.set_menu_font_size(-40);
      title_screen.set_menu_position_y(1080/32*19+10);
      title_screen.set_copyright_text("Copyright 2022 - Mark Oates - CLUBCATT Games - www.clubcatt.com\n");
      title_screen.set_copyright_text_color(AllegroFlare::Color(0x72aedd, 0.8).to_al());
      title_screen.set_copyright_font_size(-26);
      title_screen.set_menu_options({
         //{ "Investigate", "start_new_game" },
         { "Start New Game", EVENT_START_NEW_GAME },
                           //EVENT_ACTIVATE_PLATFORMING_2D_SCREEN }, //EVENT_ACTIVATE_NAME_YOUR_CHARACTER_SCREEN },
         //{ "Chronicle",      EVENT_OPEN_CHRONICLE_SCREEN },
         //{ "Driving",        EVENT_ACTIVATE_TILE_DRIVE_SCREEN },
         //{ "Platforming",    EVENT_ACTIVATE_PLATFORMING_2D_SCREEN },
         //{ "Investigate",    EVENT_ACTIVATE_INVESTIGATION_ROOM_SCREEN },
         { "Achievements",   EVENT_ACTIVATE_ACHIEVEMENTS_SCREEN },
         //{ "Storyboard",     EVENT_ACTIVATE_CUT_IN_STORYBOARD_SCREEN},
         { "Credits",        EVENT_ACTIVATE_CREDITS_SCREEN },
         { "Quit",           EVENT_EXIT_GAME },
      });
      framework->register_screen("title_screen", &title_screen);



      //// setup the achievements screen
      achievements_screen.set_font_bin(&font_bin);
      achievements_screen.set_event_emitter(&event_emitter);
      achievements_screen.set_achievements(&achievements);
      achievements_screen.set_game_event_name_to_emit_on_exit(EVENT_EXIT_ACHIEVEMENTS_SCREEN);
      achievements_screen.initialize();
      framework->register_screen("achievements_screen", &achievements_screen);



      // setup the pause screen
      pause_screen.set_font_bin(&font_bin);
      pause_screen.set_bitmap_bin(&bitmap_bin);
      pause_screen.set_event_emitter(&event_emitter);
      pause_screen.set_menu_options({
         { "Resume", "unpause_game" },
         { "Quit", "start_title_screen" },
      });
      framework->register_screen("pause_screen", &pause_screen);



      // setup the intro storyboards screen
      new_game_intro_storyboard_screen = storyboard_factory.create_advancing_text_storyboard_screen({
            // music starts
            "December 2022",
            //"Christmas Eve.",
            //"[image showing aliens invading]",
            "Aliens have invaded Earth",
            "They are after Santa's magical powers",

            "And this night, Christmas Eve, is when his magical powers are the strongest",
            //"[image showing santa's power chaimber, glowing]",

            "Santa and his elves were unable to stop the aliens",
            //"[image showing santa's losing battle]",

            "With all options gone, Santa must no do the unthinkable",
            //"[image showing krampus with his back to the screen]",
            "Santa has no choice. He must face his biggest fear...",

            //"[image showing santa appraoching krampus]",
            "...and team up with his ultimate rival...",
            //"[image showing krampus turned around]",
            "Krampus.",
         });
      new_game_intro_storyboard_screen->set_event_emitter(&event_emitter);
      new_game_intro_storyboard_screen->set_game_event_name_to_emit_after_completing(
         "finish_new_game_intro_storyboard_screen"
         //"activate_nvestigation_room_screen"
      );
      framework->register_screen("new_game_intro_storyboard_screen", new_game_intro_storyboard_screen);



      setup_platforming_2d_screen();


      // setup the credits screen
      credits_screen = storyboard_factory.create_advancing_text_storyboard_screen({
            //"Thank you to Shawn Hargreaves for creating the first version of Allegro in the 90s.",
            "Thank you to all the members of the Allegro game programming community.",
               //"which had a huge impact in my development as a programmer.",
            "Thank you to Elias and SiegeLord for your continued dedication to Allegro.",
            "Thank you to amarillion for your work to support Allegro, including creating KrampuHack.",
            //"Thank you to Matthew Leverton for creating allegro.cc",
            "Thank you to pmprog for your wishlist ideas.",
            "And thank you for playing.",
         });
      credits_screen->set_event_emitter(&event_emitter);
      credits_screen->set_game_event_name_to_emit_after_completing(EVENT_CREDITS_SCREEN_FINISHED);
      framework->register_screen("credits_screen", credits_screen);


      if (in_development_mode()) load_development_data();
      if (in_test_mode()) load_test_data();


      initialized = true;


      return;
    body_dependency_symbols:
      - AllegroFlare::StoryboardFactory
      - AllegroFlare::Color


  - name: refresh_blurry_background_screen_capture
    body: |
       //if (blurry_background_screen_capture) al_destroy_bitmap(blurry_background_screen_capture);
       //blurry_background_screen_capture =
         //AllegroFlare::ScreenCapture::create_backbuffer_capture_as_scaled_bitmap(1920/20, 1080/20);
       return;
    body_dependency_symbols: []


  - name: load_development_data
    body: |
      return;
    body_dependency_symbols: []


  - name: load_test_data
    body: |
      load_development_data(); // for now, TODO: fix for a proper development setup
      //chronicle_screen.refresh();
      return;


  - name: build_item_dictionary
    body: |
      // TODO:
      //item_dictionary.push_back("letter", ...);
      return;


  - name: setup_platforming_2d_screen
    body: |
      //return;
      static std::string TEST_BASE_FOLDER = "/Users/markoates/Repos/KrampusReturns/bin/programs/data/";
      platforming_2d_screen.set_font_bin(&framework->get_font_bin_ref());
      platforming_2d_screen.set_bitmap_bin(&framework->get_bitmap_bin_ref());
      platforming_2d_screen.set_display(framework->get_primary_display());
      platforming_2d_screen.set_event_emitter(&framework->get_event_emitter_ref());
      platforming_2d_screen.set_map_dictionary({
         // TODO: here
         { "map_a", TEST_BASE_FOLDER + "maps/krampus-returns-map01-0x.tmj" },
         { "map_b", TEST_BASE_FOLDER + "maps/krampus-returns-map02-0x.tmj" },
         //{ "gym", "/Users/markoates/Repos/allegro_flare/bin/data/maps/map1-0x.tmj" },
         //{ "map_b", "/Users/markoates/Repos/allegro_flare/bin/data/maps/map1b-0x.tmj" },
      });
      platforming_2d_screen.initialize_maps();


      platforming_2d_screen.set_currently_active_map("map_a");



      //platforming_2d_screen.set_currently_active_map("map_b");

      platforming_2d_screen.initialize();


      framework->register_screen("platforming_2d_screen", &platforming_2d_screen);

      return;
    body_dependency_symbols:
      - Wicked::Entities::Basic2DFactory


  - name: unlock_achievement
    parameters:
      - name: achievement_name
        type: std::string
        default_argument: '"[unset-achievement_name]"'
    body: |
      // TODO: make this an event_emitter->emit_unlock_achievement_event();
      event_emitter->emit_event(
         ALLEGRO_FLARE_EVENT_UNLOCK_ACHIEVEMENT,
         intptr_t(new std::string(achievement_name))
      );
      return;


  - name: push_screen
    body: |
      prior_screens_stack.push_back(framework->get_currently_active_screen_name());
      return;


  - name: pop_screen
    type: std::string
    body: |
      if (!prior_screen_is_in_stack()) return "";
      std::string value_to_return = prior_screens_stack.back();
      prior_screens_stack.pop_back();
      return value_to_return;


  - name: reactivate_prior_screen
    parameters:
      - name: fallback_if_stack_is_empty
        type: std::string
        default_argument: '"tile_drive_screen"'
    body: |
      std::string screen_to_activate = prior_screen_is_in_stack() ? pop_screen() : fallback_if_stack_is_empty;
      framework->activate_screen(screen_to_activate);
      return;


  - name: prior_screen_is_in_stack
    type: bool
    body: |
      return !prior_screens_stack.empty();


  - name: game_event_func
    virtual: true
    override: true
    parameters:
      - name: ev
        type: AllegroFlare::GameEvent*
        default_argument: nullptr
    guards: [ ev, event_emitter ]
    body: |
      std::string event_name = ev->get_type();
      std::cout << "EVENT_EMITTED: \"" << event_name << "\"" << std::endl;

      std::map<std::string, std::function<void()>> event_map = {
         { "initialize", [this](){
            //if (in_production_mode())
            //{
               //event_emitter->emit_play_sound_effect_event("intro_music");
               event_emitter->emit_play_music_track_event("intro_music");
               framework->activate_screen("opening_logos_storyboard_screen");
            //}
            //else
            //{
               //event_emitter->emit_game_event(AllegroFlare::GameEvent(EVENT_ACTIVATE_INVESTIGATION_ROOM_SCREEN));
               //event_emitter->emit_game_event(AllegroFlare::GameEvent("start_title_screen"));
            //}
         }},
         { "start_title_screen", [this](){
            framework->activate_screen("title_screen");
         }},
         { EVENT_START_NEW_GAME, [this](){
            event_emitter->emit_play_music_track_event("intro_music");
            //framework->activate_screen("opening_logos_storyboard_screen");
            framework->activate_screen("new_game_intro_storyboard_screen");
         }},
         { "finish_new_game_intro_storyboard_screen", [this](){
            // TODO: replace this with an event EVENT_ACTIVATE_PLATFORMING_2D_SCREEN
            framework->activate_screen("platforming_2d_screen");
            platforming_2d_screen.load_level_and_start();
         }},
         //{ EVENT_ACTIVATE_TILE_DRIVE_SCREEN, [this](){
            //framework->activate_screen("tile_drive_screen");
         //}},
         { EVENT_ACTIVATE_PLATFORMING_2D_SCREEN, [this](){
            framework->activate_screen("platforming_2d_screen");
         }},
         //{ EVENT_ACTIVATE_NAME_YOUR_CHARACTER_SCREEN, [this](){
            //framework->activate_screen("character_name_input_screen");
         //}},
         //{ EVENT_ACTIVATE_PLATFORMING_2D_SCREEN, [this](){
            //framework->activate_screen("");
         //}},
         { EVENT_ACTIVATE_CREDITS_SCREEN, [this](){
            framework->activate_screen("credits_screen");
         }},
         { EVENT_ACTIVATE_ACHIEVEMENTS_SCREEN, [this](){
            push_screen();
            framework->activate_screen("achievements_screen");
         }},
         { EVENT_EXIT_ACHIEVEMENTS_SCREEN, [this](){
            reactivate_prior_screen("title_screen");
         }},
         //{ EVENT_ACTIVATE_INVESTIGATION_ROOM_SCREEN, [this](){
            //push_screen();
            //framework->activate_screen("investigation_room_screen");
         //}},
         //{ EVENT_EXIT_INVESTIGATION_ROOM_SCREEN, [this](){
            //reactivate_prior_screen("tile_drive_screen");
         //}},
         //{ EVENT_ACTIVATE_CUT_IN_STORYBOARD_SCREEN, [this](){
            //push_screen();
            //framework->activate_screen("cut_in_storyboard_screen");
         //}},
         //{ EVENT_CUT_IN_STORYBOARD_SCREEN_FINISHED, [this](){
            //reactivate_prior_screen();
         //}},
         { EVENT_CREDITS_SCREEN_FINISHED, [this](){
            unlock_achievement("stay_through_the_credits");
            framework->activate_screen("title_screen");
         }},
         { EVENT_EXIT_GAME, [this](){
            event_emitter->emit_exit_game_event();
         }},
         //{ EVENT_OPEN_CHRONICLE_SCREEN, [this](){
            //refresh_blurry_background_screen_capture();
            //chronicle_screen.set_background_bitmap(blurry_background_screen_capture);
            //push_screen();
            //framework->activate_screen("chronicle_screen");
         //}},
         //{ EVENT_CLOSE_CHRONICLE_SCREEN, [this](){
            //reactivate_prior_screen("investigation_room_screen");
         //}},
         { EVENT_PAUSE_GAME, [this](){
            push_screen();
            framework->activate_screen("pause_screen");
         }},
         { EVENT_UNPAUSE_GAME, [this](){
            reactivate_prior_screen("investigation_room_screen");
         }},
         { AllegroFlare::Prototypes::FixedRoom2D::EventNames::SCRIPT_EVENT_NAME, [this, ev](){
            using namespace AllegroFlare::Prototypes::FixedRoom2D;

            AllegroFlare::GameEventDatas::Base* game_event_data = ev->get_data();

            if (!game_event_data)
            {
               std::stringstream error_message;
               error_message << "CatDetective::Runner::game_event_func error: "
                             << "When processing a SCRIPT_EVENT, game_event_data cannot be nullptr.";
               throw std::runtime_error(error_message.str());
            }

            //if (game_event_data->is_type(ScriptEventDatas::CollectEvidence::TYPE))
            //{
               //ScriptEventDatas::CollectEvidence* collect_evidence_event_data =
                   //static_cast<ScriptEventDatas::CollectEvidence*>(game_event_data);

               //std::string evidence_name = collect_evidence_event_data->get_evidence_dictionary_name_to_collect();
               //int evidence_index = find_index_of_evidence_by_identifier_or_throw(evidence_name, "game_event_func");

               //add_evidence_by_id(evidence_index);
               //emit_event_to_spawn_you_got_new_evidence_dialog(evidence_index);
            //}
            //else if (game_event_data->is_type(ScriptEventDatas::CollectItem::TYPE))
            //{
               //ScriptEventDatas::CollectItem* collect_item_event_data =
                   //static_cast<ScriptEventDatas::CollectItem*>(game_event_data);

               //// TODO: actually extract and pass in the item id (or name)
               //int item_id = 1;

               //// TODO: this line:
               //// add_item_by_id(evidence_id);
               //emit_event_to_spawn_you_got_an_item_dialog(item_id);
            //}
         }},
      };



      // locate and call the function to handle the event 

      if (event_map.count(event_name) == 0)
      {
         // event not found
         std::stringstream warning_message;
         warning_message << "Event not handled: \"" << event_name << "\".";
         AllegroFlare::Errors::warn_from("KrampusReturns::Runner::game_event_func", warning_message.str());
      }
      else
      {
         // call the event
         event_map[event_name]();
      }


      return;
    body_dependency_symbols:
      - ALLEGRO_FLARE_EVENT_UNLOCK_ACHIEVEMENT
      - AllegroFlare::Prototypes::FixedRoom2D::EventNames
      - AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::CollectItem
      - AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::CollectEvidence
      - AllegroFlare::Errors


  - name: run
    parameters:
      - name: mode
        type: std::string
        default_argument: '"production"'
    static: true
    body: |
      // TODO: add "is_valid_mode" (or similar) and validate the mode argument

      // setup the framework
      AllegroFlare::Frameworks::Full framework;
      //framework.disable_escape_key_will_shutdown();
      framework.initialize();

      AllegroFlare::FontBin &font_bin = framework.get_font_bin_ref();
      AllegroFlare::BitmapBin &bitmap_bin = framework.get_bitmap_bin_ref();
      AllegroFlare::SampleBin &sample_bin = framework.get_sample_bin_ref();
      AllegroFlare::ModelBin &model_bin = framework.get_model_bin_ref();

      // TODO: develop a strategy where this branching can have dependable production
      // data when switching to "production"
      if (is_test_mode(mode) || is_development_mode(mode))
      {
         font_bin.set_full_path("/Users/markoates/Repos/KrampusReturns/bin/programs/data/fonts");
         bitmap_bin.set_full_path("/Users/markoates/Repos/KrampusReturns/bin/programs/data/bitmaps");
         sample_bin.set_full_path("/Users/markoates/Repos/KrampusReturns/bin/programs/data/samples");
         model_bin.set_full_path("/Users/markoates/Repos/KrampusReturns/bin/programs/data/models");
      }

      Runner runner(mode, &framework, &framework.get_event_emitter_ref());
      runner.initialize();
      framework.register_screen("runner", &runner);

      framework.run_loop();

      return;


  - name: is_test_mode
    type: bool
    static: true
    parameters:
      - name: mode
        type: std::string
        default_argument: '"[unset-mode]"'
    body: |
      return mode == MODE_TEST;


  - name: is_development_mode
    type: bool
    static: true
    parameters:
      - name: mode
        type: std::string
        default_argument: '"[unset-mode]"'
    body: |
      return mode == MODE_DEVELOPMENT;


  - name: is_production_mode
    type: bool
    static: true
    parameters:
      - name: mode
        type: std::string
        default_argument: '"[unset-mode]"'
    body: |
      return mode == MODE_PRODUCTION;


  - name: in_development_mode
    type: bool
    body: |
      return mode == MODE_DEVELOPMENT;
      

  - name: in_production_mode
    type: bool
    body: |
      return mode == MODE_PRODUCTION;
      

  - name: in_test_mode
    type: bool
    body: |
      return mode == MODE_TEST;


dependencies:


  - symbol: ALLEGRO_FLARE_EVENT_UNLOCK_ACHIEVEMENT
    headers: [ AllegroFlare/EventNames.hpp ]
  - symbol: AllegroFlare::Screens::Base
    headers: [ AllegroFlare/Screens/Base.hpp ]
  - symbol: AllegroFlare::Screens::TitleScreen
    headers: [ AllegroFlare/Screens/TitleScreen.hpp ]
  - symbol: AllegroFlare::Screens::PauseScreen
    headers: [ AllegroFlare/Screens/PauseScreen.hpp ]
  - symbol: AllegroFlare::StoryboardFactory
    headers: [ AllegroFlare/StoryboardFactory.hpp ]
  - symbol: AllegroFlare::Screens::GameWonScreen
    headers: [ AllegroFlare/Screens/GameWonScreen.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::Screen
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/Screen.hpp ]
  - symbol: AllegroFlare::Prototypes::Platforming2D::Screen
    headers: [ AllegroFlare/Prototypes/Platforming2D/Screen.hpp ]
  - symbol: AllegroFlare::Prototypes::TileDrive::Screen
    headers: [ AllegroFlare/Prototypes/TileDrive/Screen.hpp ]
  - symbol: AllegroFlare::Color
    headers: [ AllegroFlare/Color.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::Configuration
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/Configuration.hpp ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_EVENT
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_BITMAP
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::Color
    headers: [ AllegroFlare/Color.hpp ]
  - symbol: AllegroFlare::Screens::Achievements
    headers: [ AllegroFlare/Screens/Achievements.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::Frameworks::Full
    headers: [ AllegroFlare/Frameworks/Full.hpp ]
  - symbol: AllegroFlare::GameEvent
    headers: [ AllegroFlare/GameEvent.hpp ]
  - symbol: AllegroFlare::Screens::Storyboard
    headers: [ AllegroFlare/Screens/Storyboard.hpp ]
  - symbol: AllegroFlare::Shader
    headers: [ AllegroFlare/Shader.hpp ]
  - symbol: AllegroFlare::Screens::CharacterNameInput
    headers: [ AllegroFlare/Screens/CharacterNameInput.hpp ]
  - symbol: Wicked::Entities::Basic2DFactory
    headers: [ Wicked/Entities/Basic2DFactory.hpp ]
  - symbol: AllegroFlare::Prototypes::TileDrive::TerrainMeshDictionaryRecord
    headers: [ AllegroFlare/Prototypes/TileDrive/TerrainMeshDictionaryRecord.hpp ]
  - symbol: AllegroFlare::Inventory
    headers: [ AllegroFlare/Inventory.hpp ]
  - symbol: AllegroFlare::InventoryDictionary
    headers: [ AllegroFlare/InventoryDictionary.hpp ]
  - symbol: AllegroFlare::InventoryDictionaryItems::WithAttributes
    headers: [ AllegroFlare/InventoryDictionaryItems/WithAttributes.hpp ]
  - symbol: AllegroFlare::ScreenCapture
    headers: [ AllegroFlare/ScreenCapture.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::EventNames
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/EventNames.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::CollectItem
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectItem.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::CollectEvidence
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectEvidence.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::DialogEventDatas::CreateYouGotEvidenceDialog
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CreateYouGotEvidenceDialog.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::DialogEventDatas::CreateYouGotAnItemDialog
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CreateYouGotAnItemDialog.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::ScriptRunner
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner.hpp ]
  - symbol: KrampusReturns::Gameplay::Screen
    headers: [ KrampusReturns/Gameplay/Screen.hpp ]
  - symbol: AllegroFlare::Errors
    headers: [ AllegroFlare/Errors.hpp ]


