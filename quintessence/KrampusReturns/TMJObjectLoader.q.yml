properties:


  - name: filename
    type: std::string
    init_with: '"filename-not-set.tmj"'
    constructor_arg: true

  - name: loaded
    type: bool
    init_with: false


functions:


  - name: load
    guards: [ (!loaded) ]
    body: |
      if (!file_exists(filename))
      {
         std::stringstream error_message;
         error_message << "[KrampusReturns::TMJObjectLoader::load()]: error: The file "
                       << "\"" << filename << "\" does not exist.";
         throw std::runtime_error(error_message.str());
      }

      // load and validate the json data to variables
      std::ifstream i(filename);
      nlohmann::json source_json;
      try
      {
         i >> source_json;
      }
      catch (const std::exception& e)
      {
         i.close();
         std::stringstream error_message;
         error_message << "The file "
                       << "\"" << filename << "\" appears to have"
                       << " malformed JSON. The following error was thrown by nlohmann::json: \""
                       << e.what() << "\"";
         AllegroFlare::Errors::throw_error("KrampusReturns::TMJObjectLoader", error_message.str());
      }
      i.close();


      // TODO: validate there is one and only "objectgroup" layer

      // get first j["layers"] that is a ["type"] == "objectgroup"
      bool object_layer_type_found = false;
      nlohmann::json object_layer_json;
      for (auto &layer : source_json["layers"].items())
      {
         if (layer.value()["type"] == "objectgroup")
         {
            object_layer_json = layer.value();
            object_layer_type_found = true;
            break;
         }
      }
      if (!object_layer_type_found)
      {
         // TODO: Swap this error message with AllegroFlare::Errors
         throw std::runtime_error("TMJObjectLoader: error: layer of type \"objectgroup\" not found.");
      }
      

      return;
    body_dependency_symbols:
      - AllegroFlare::Errors
      - nlohmann::json
      - std::ifstream


  - name: file_exists
    type: bool
    static: true
    private: true
    parameters:
      - name: filename
        type: std::string
        default_argument: '"[unset-filename]"'
    body: |
      return std::filesystem::exists(filename);
    body_dependency_symbols:
      - std::filesystem::exists


dependencies:


  - symbol: nlohmann::json
    headers: [ lib/nlohmann/json.hpp ]
  - symbol: std::filesystem::exists
    headers: [ filesystem ]
  - symbol: std::ifstream
    headers: [ fstream ]
  - symbol: AllegroFlare::Errors
    headers: [ AllegroFlare/Errors.hpp ]


